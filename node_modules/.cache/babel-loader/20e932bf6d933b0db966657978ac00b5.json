{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/IC/Computing/DRP/drp48/src/components/game/HandCard.tsx\";\nimport React, { useContext } from 'react';\nimport { CardComponent } from './Card';\nimport Context from './gameContext';\nexport const HandCardAreaComponent = ({\n  playerVar,\n  cards\n}) => {\n  const context = useContext(Context);\n\n  const isPicked = index => context.handSelected == index;\n\n  const renderCard = i => {\n    const tag = cards[i][1] ? cards[i][1] : Number.POSITIVE_INFINITY;\n    return /*#__PURE__*/React.createElement(CardComponent, {\n      isSelected: isPicked(i),\n      scale: 1,\n      tag: tag,\n      cardSymbol: cards[i][0],\n      onClick: () => {\n        if (context.handSelected == i) {\n          context.unselectHand();\n        } else {\n          context.pickHandCardCallback(i);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const renderHandCardArea = () => {\n    let result = [];\n\n    for (let i = 0; i < cards.length; i++) {\n      result.push(renderCard(i));\n    }\n\n    return result;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    style: {\n      width: '100%',\n      height: '133px',\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: \"center\",\n      float: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, renderHandCardArea());\n};","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/components/game/HandCard.tsx"],"names":["React","useContext","CardComponent","Context","HandCardAreaComponent","playerVar","cards","context","isPicked","index","handSelected","renderCard","i","tag","Number","POSITIVE_INFINITY","unselectHand","pickHandCardCallback","renderHandCardArea","result","length","push","width","height","display","flexWrap","justifyContent","float"],"mappings":";AAAA,OAAOA,KAAP,IAA0BC,UAA1B,QAA4C,OAA5C;AAEA,SAASC,aAAT,QAA8B,QAA9B;AAGA,OAAOC,OAAP,MAAoB,eAApB;AAOA,OAAO,MAAMC,qBAAqB,GAAG,CAAC;AACpCC,EAAAA,SADoC;AAEpCC,EAAAA;AAFoC,CAAD,KAGC;AAEpC,QAAMC,OAAO,GAAGN,UAAU,CAACE,OAAD,CAA1B;;AAEA,QAAMK,QAAQ,GAAIC,KAAD,IAAmBF,OAAO,CAACG,YAAR,IAAwBD,KAA5D;;AAEA,QAAME,UAAU,GAAIC,CAAD,IAA4B;AAC7C,UAAMC,GAAG,GAAGP,KAAK,CAACM,CAAD,CAAL,CAAS,CAAT,IAAcN,KAAK,CAACM,CAAD,CAAL,CAAS,CAAT,CAAd,GAA4BE,MAAM,CAACC,iBAA/C;AACA,wBAAO,oBAAC,aAAD;AACL,MAAA,UAAU,EAAEP,QAAQ,CAACI,CAAD,CADf;AAEL,MAAA,KAAK,EAAE,CAFF;AAGL,MAAA,GAAG,EAAEC,GAHA;AAIL,MAAA,UAAU,EAAEP,KAAK,CAACM,CAAD,CAAL,CAAS,CAAT,CAJP;AAKL,MAAA,OAAO,EAAE,MAAM;AACb,YAAIL,OAAO,CAACG,YAAR,IAAwBE,CAA5B,EAA+B;AAC7BL,UAAAA,OAAO,CAACS,YAAR;AACD,SAFD,MAEO;AACLT,UAAAA,OAAO,CAACU,oBAAR,CAA6BL,CAA7B;AACD;AACF,OAXI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAaD,GAfD;;AAiBA,QAAMM,kBAAkB,GAAG,MAAqB;AAC9C,QAAIC,MAAqB,GAAG,EAA5B;;AACA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACc,MAA1B,EAAkCR,CAAC,EAAnC,EAAuC;AACrCO,MAAAA,MAAM,CAACE,IAAP,CAAYV,UAAU,CAACC,CAAD,CAAtB;AACD;;AACD,WAAOO,MAAP;AACD,GAND;;AAQA,sBACE;AACE,IAAA,SAAS,EAAC,WADZ;AAEE,IAAA,KAAK,EAAE;AACLG,MAAAA,KAAK,EAAE,MADF;AAELC,MAAAA,MAAM,EAAE,OAFH;AAGLC,MAAAA,OAAO,EAAE,MAHJ;AAILC,MAAAA,QAAQ,EAAE,MAJL;AAKLC,MAAAA,cAAc,EAAE,QALX;AAMLC,MAAAA,KAAK,EAAE;AANF,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGT,kBAAkB,EAVrB,CADF;AAcD,CAhDM","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { Card, Premise } from '../../types'\nimport { CardComponent } from './Card'\nimport { useDrop } from 'react-dnd'\nimport { ItemTypes } from './ItemTypes'\nimport Context from './gameContext'\n\ninterface HandCardAreaProps {\n  playerVar: string,\n  cards: [Card, number][],\n}\n\nexport const HandCardAreaComponent = ({\n  playerVar,\n  cards,\n}: HandCardAreaProps): JSX.Element => {\n\n  const context = useContext(Context)\n\n  const isPicked = (index: number) => context.handSelected == index\n\n  const renderCard = (i: number): JSX.Element => {\n    const tag = cards[i][1] ? cards[i][1] : Number.POSITIVE_INFINITY\n    return <CardComponent  \n      isSelected={isPicked(i)}\n      scale={1}\n      tag={tag}\n      cardSymbol={cards[i][0]} \n      onClick={() => {\n        if (context.handSelected == i) {\n          context.unselectHand()\n        } else {\n          context.pickHandCardCallback(i)\n        }\n      }}\n    />\n  }\n\n  const renderHandCardArea = (): JSX.Element[] => {\n    let result: JSX.Element[] = []\n    for (let i = 0; i < cards.length; i++) {\n      result.push(renderCard(i))\n    }\n    return result\n  }\n\n  return (\n    <div \n      className=\"board-row\" \n      style={{\n        width: '100%',\n        height: '133px',\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: \"center\",\n        float: \"none\",\n      }}> \n      {renderHandCardArea()}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}