{"ast":null,"code":"import Axios from \"axios\";\nimport { Paths } from \"../routesPaths\";\nimport sha256 from \"crypto-js/sha256\";\nconst salt = \"sallty\";\n\nfunction hash(input) {\n  return sha256(salt + input).toString();\n}\n\nexport function authHeader() {\n  var _localStorage$getItem;\n\n  // return authorization header with jwt token\n  let user = JSON.parse((_localStorage$getItem = localStorage.getItem('user')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"null\");\n\n  if (user && user.token) {\n    return {\n      'Authorization': 'Bearer ' + user.token\n    };\n  } else {\n    return {};\n  }\n}\nexport const userService = {\n  login,\n  logout,\n  register\n};\n\nfunction login(username, password, onSetUser, onError) {\n  const requestOptions = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const data = {\n    username: username,\n    password: hash(password)\n  };\n  return Axios.post(Paths.userLogin, data, requestOptions).then(resp => handleResponse(resp.data, onSetUser)).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    onSetUser(user);\n    return user;\n  }).catch(err => {\n    onError();\n    return undefined;\n  });\n}\n\nfunction logout(onSetUser) {\n  // remove user from local storage to log user out\n  onSetUser(undefined);\n}\n\nfunction register(username, email, password, onSetUser) {\n  const requestOptions = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const data = {\n    username: username,\n    email: email,\n    password: hash(password)\n  };\n  return Axios.post(Paths.userRegister, data, requestOptions).then(resp => resp.data);\n}\n\nfunction handleResponse(response, onSetUser) {\n  if (!response.ok) {\n    if (response.status === 401) {\n      // auto logout if 401 response returned from api\n      logout(onSetUser);\n    }\n\n    return Promise.reject(\"error\");\n  }\n\n  console.log(response.statusText);\n  return new Promise((resolve, reject) => resolve(JSON.parse(response.statusText)));\n}","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/services/user.service.ts"],"names":["Axios","Paths","sha256","salt","hash","input","toString","authHeader","user","JSON","parse","localStorage","getItem","token","userService","login","logout","register","username","password","onSetUser","onError","requestOptions","headers","data","post","userLogin","then","resp","handleResponse","catch","err","undefined","email","userRegister","response","ok","status","Promise","reject","console","log","statusText","resolve"],"mappings":"AAAA,OAAOA,KAAP,MAA0C,OAA1C;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAIA,MAAMC,IAAI,GAAG,QAAb;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqC;AACnC,SAAOH,MAAM,CAACC,IAAI,GAAGE,KAAR,CAAN,CAAqBC,QAArB,EAAP;AACD;;AAED,OAAO,SAASC,UAAT,GAAsB;AAAA;;AAC3B;AACA,MAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,0BAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,yEAA2C,MAA3C,CAAX;;AAEA,MAAIJ,IAAI,IAAIA,IAAI,CAACK,KAAjB,EAAwB;AACpB,WAAO;AAAE,uBAAiB,YAAYL,IAAI,CAACK;AAApC,KAAP;AACH,GAFD,MAEO;AACH,WAAO,EAAP;AACH;AACF;AAED,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA;AAHuB,CAApB;;AAMP,SAASF,KAAT,CACEG,QADF,EAEEC,QAFF,EAGEC,SAHF,EAIEC,OAJF,EAKE;AACE,QAAMC,cAAkC,GAAG;AACvCC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAD8B,GAA3C;AAIA,QAAMC,IAAqB,GAAG;AAC5BN,IAAAA,QAAQ,EAAEA,QADkB;AAE5BC,IAAAA,QAAQ,EAAEf,IAAI,CAACe,QAAD;AAFc,GAA9B;AAKA,SAAOnB,KAAK,CAACyB,IAAN,CAAyBxB,KAAK,CAACyB,SAA/B,EAA0CF,IAA1C,EAAgDF,cAAhD,EACFK,IADE,CACGC,IAAI,IAAIC,cAAc,CAACD,IAAI,CAACJ,IAAN,EAAYJ,SAAZ,CADzB,EAEFO,IAFE,CAEGnB,IAAI,IAAI;AACV;AACAY,IAAAA,SAAS,CAACZ,IAAD,CAAT;AACA,WAAOA,IAAP;AACH,GANE,EAOFsB,KAPE,CAOIC,GAAG,IAAI;AAAEV,IAAAA,OAAO;AAAI,WAAOW,SAAP;AAAkB,GAP1C,CAAP;AAQH;;AAED,SAAShB,MAAT,CAAgBI,SAAhB,EAAoC;AAChC;AACAA,EAAAA,SAAS,CAACY,SAAD,CAAT;AACH;;AAED,SAASf,QAAT,CACEC,QADF,EAEEe,KAFF,EAGEd,QAHF,EAIEC,SAJF,EAKE;AACE,QAAME,cAAc,GAAG;AACnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AADU,GAAvB;AAIA,QAAMC,IAAoB,GAAG;AAC3BN,IAAAA,QAAQ,EAAEA,QADiB;AAE3Be,IAAAA,KAAK,EAAEA,KAFoB;AAG3Bd,IAAAA,QAAQ,EAAEf,IAAI,CAACe,QAAD;AAHa,GAA7B;AAMA,SAAOnB,KAAK,CAACyB,IAAN,CAAqCxB,KAAK,CAACiC,YAA3C,EAAyDV,IAAzD,EAA+DF,cAA/D,EACJK,IADI,CACCC,IAAI,IAAIA,IAAI,CAACJ,IADd,CAAP;AAEH;;AAGD,SAASK,cAAT,CACEM,QADF,EAEEf,SAFF,EAG2B;AACzB,MAAI,CAACe,QAAQ,CAACC,EAAd,EAAkB;AAChB,QAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B;AACArB,MAAAA,MAAM,CAACI,SAAD,CAAN;AACD;;AACD,WAAOkB,OAAO,CAACC,MAAR,CAAe,OAAf,CAAP;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACO,UAArB;AAEA,SAAO,IAAIJ,OAAJ,CAAY,CAACK,OAAD,EAAUJ,MAAV,KAAqBI,OAAO,CAAClC,IAAI,CAACC,KAAL,CAAWyB,QAAQ,CAACO,UAApB,CAAD,CAAxC,CAAP;AACD","sourcesContent":["import Axios, { AxiosRequestConfig } from \"axios\";\nimport { UserResponse, UserCredential, LoginCredential } from \"../types\";\nimport { Paths } from \"../routesPaths\";\nimport sha256 from \"crypto-js/sha256\";\n\ntype SetUser = (user: UserCredential | undefined) => void\n\nconst salt = \"sallty\"\n\nfunction hash(input: string): string {\n  return sha256(salt + input).toString()\n}\n\nexport function authHeader() {\n  // return authorization header with jwt token\n  let user = JSON.parse(localStorage.getItem('user') ?? \"null\");\n\n  if (user && user.token) {\n      return { 'Authorization': 'Bearer ' + user.token };\n  } else {\n      return {};\n  }\n}\n\nexport const userService = {\n    login,\n    logout,\n    register,\n};\n\nfunction login(\n  username: string, \n  password: string, \n  onSetUser: SetUser,\n  onError: () => void\n) {\n    const requestOptions: AxiosRequestConfig = {\n        headers: { 'Content-Type': 'application/json' },\n    }\n\n    const data: LoginCredential = {\n      username: username,\n      password: hash(password)\n    }\n\n    return Axios.post<UserResponse>(Paths.userLogin, data, requestOptions)\n        .then(resp => handleResponse(resp.data, onSetUser))\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            onSetUser(user)\n            return user;\n        })\n        .catch(err => { onError(); return undefined })\n}\n\nfunction logout(onSetUser: SetUser) {\n    // remove user from local storage to log user out\n    onSetUser(undefined)\n}\n\nfunction register(\n  username: string, \n  email: string,\n  password: string,\n  onSetUser: SetUser\n) {\n    const requestOptions = {\n        headers: { 'Content-Type': 'application/json' },\n    };\n\n    const data: UserCredential = {\n      username: username, \n      email: email, \n      password: hash(password)\n    }\n\n    return Axios.post<UserResponse | undefined>(Paths.userRegister, data, requestOptions)\n      .then(resp => resp.data)\n}\n\n  \nfunction handleResponse(\n  response: UserResponse, \n  onSetUser: SetUser\n): Promise<UserCredential> {\n  if (!response.ok) {\n    if (response.status === 401) {\n      // auto logout if 401 response returned from api\n      logout(onSetUser);\n    }\n    return Promise.reject(\"error\");\n  }\n  console.log(response.statusText);\n  \n  return new Promise((resolve, reject) => resolve(JSON.parse(response.statusText)))\n}"]},"metadata":{},"sourceType":"module"}