{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/IC/Computing/DRP/drp48/src/components/game/Truthtable.tsx\";\nimport React from 'react';\nimport { parsePremiseSafe } from '../../server/gameApp/game/premise';\nimport { genTruthTableInStringForBTrees } from '../../server/gameApp/logicResolver/plainResolver';\nimport Table from 'react-bootstrap/Table';\nexport const TruthTable = ({\n  premises\n}) => {\n  const allVarsSet = new Set();\n  premises.forEach(p => p.filter(c => [\"A\", \"B\", \"C\", \"D\"].includes(c)).forEach(c => allVarsSet.add(c)));\n  const allVars = Array.from(allVarsSet);\n  const btrees = premises.map(p => parsePremiseSafe(p, allVars));\n  const table = genTruthTableInStringForBTrees(allVars, btrees);\n  return /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, table.headers.map(it => /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      paddingTop: \"0.25rem\",\n      paddingBottom: \"0.25rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 32\n    }\n  }, it))), table.body.map(row => /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 28\n    }\n  }, row.map(it => /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      paddingTop: \"1px\",\n      paddingBottom: \"1px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 22\n    }\n  }, it)))));\n};","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/components/game/Truthtable.tsx"],"names":["React","parsePremiseSafe","genTruthTableInStringForBTrees","Table","TruthTable","premises","allVarsSet","Set","forEach","p","filter","c","includes","add","allVars","Array","from","btrees","map","table","headers","it","paddingTop","paddingBottom","body","row"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,8BAAT,QAA+C,kDAA/C;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AAMA,OAAO,MAAMC,UAAU,GAAG,CAAC;AACzBC,EAAAA;AADyB,CAAD,KAEb;AACX,QAAMC,UAAqB,GAAG,IAAIC,GAAJ,EAA9B;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiBC,CAAC,IAAIA,CAAC,CAACC,MAAF,CAASC,CAAC,IAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBC,QAArB,CAA8BD,CAA9B,CAAd,EAAgDH,OAAhD,CAAwDG,CAAC,IAAIL,UAAU,CAACO,GAAX,CAAeF,CAAf,CAA7D,CAAtB;AACA,QAAMG,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAWV,UAAX,CAAhB;AACA,QAAMW,MAAM,GAAGZ,QAAQ,CAACa,GAAT,CAAaT,CAAC,IAAIR,gBAAgB,CAACQ,CAAD,EAAIK,OAAJ,CAAlC,CAAf;AACA,QAAMK,KAAK,GAAGjB,8BAA8B,CAACY,OAAD,EAAUG,MAAV,CAA5C;AACA,sBAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAkBG,EAAE,iBAAI;AAAI,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAE,SAAd;AAAyBC,MAAAA,aAAa,EAAE;AAAxC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkEF,EAAlE,CAAxB,CADH,CADK,EAIJF,KAAK,CAACK,IAAN,CAAWN,GAAX,CAAeO,GAAG,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACpBA,GAAG,CAACP,GAAJ,CAAQG,EAAE,iBAAI;AAAI,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAE,KAAd;AAAqBC,MAAAA,aAAa,EAAE;AAApC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0DF,EAA1D,CAAd,CADoB,CAAtB,CAJI,CAAP;AAQD,CAhBM","sourcesContent":["import React from 'react'\nimport { Premise, Card } from '../../types'\nimport { parsePremiseSafe } from '../../server/gameApp/game/premise'\nimport { genTruthTableInStringForBTrees } from '../../server/gameApp/logicResolver/plainResolver'\nimport Table from 'react-bootstrap/Table'\n\ninterface Props {\n  premises: Premise[]\n}\n\nexport const TruthTable = ({\n  premises\n}: Props) => {\n  const allVarsSet: Set<Card> = new Set()\n  premises.forEach(p => p.filter(c => [\"A\", \"B\", \"C\", \"D\"].includes(c)).forEach(c => allVarsSet.add(c)))\n  const allVars = Array.from(allVarsSet)\n  const btrees = premises.map(p => parsePremiseSafe(p, allVars))\n  const table = genTruthTableInStringForBTrees(allVars, btrees)\n  return <Table>\n    <thead>\n      {table.headers.map(it => <td style={{ paddingTop: \"0.25rem\", paddingBottom: \"0.25rem\", }}>{it}</td>)}\n    </thead>\n    {table.body.map(row => <tr>\n      {row.map(it => <td style={{ paddingTop: \"1px\", paddingBottom: \"1px\", }}>{it}</td>)}\n    </tr>)}\n  </Table>\n}\n"]},"metadata":{},"sourceType":"module"}