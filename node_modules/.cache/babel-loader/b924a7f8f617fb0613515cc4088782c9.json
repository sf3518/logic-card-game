{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/IC/Computing/DRP/drp48/src/components/game/LevelBoard.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { PremiseComponent } from './Premise';\nimport { HandCardAreaComponent } from './HandCard';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Axios from 'axios';\nimport { Paths } from '../../routesPaths';\nimport { doActionToView, getGoalStates, fixInfinityNumber } from '../../game/views';\nimport { Table, Button, Overlay, Tooltip } from 'react-bootstrap';\nimport Context from './gameContext';\nimport { playCardsToAction, discardAction } from '../../game/actions';\nimport { variable } from '../../server/gameApp/logicResolver/bools';\nimport { GoalsComponent } from './Goals';\nimport { useParams } from 'react-router';\nimport './Board.css';\n\nfunction initialGameView(playerVar) {\n  return {\n    playerVar: playerVar,\n    handCardWithCount: [],\n    discardPile: [],\n    premises: [],\n    deckCount: 0,\n    goals: [{\n      kind: 'prove',\n      expr: [playerVar],\n      boolTree: variable(playerVar)\n    }]\n  };\n}\n\nconst playAs = \"A\"; // Game board\n\nconst LevelBoardComponent = () => {\n  // read router parameter\n  const params = useParams();\n  const levelID = Number(params.levelID);\n  console.log(params.sid, params.levelID); // Actions been taken in this round\n\n  const [actions, setActions] = useState([]); // Which hand card is selected at now \n  // -1 if no card is selected\n\n  const [handSelected, setHandSelected] = useState(-1); // History of views in this round\n\n  const [historyViews, setHV] = useState([initialGameView(\"A\")]); // Title and description for the current level\n\n  const [[title, description], setTexts] = useState([\"title\", [\"desciption\"]]); // which description to display, if descIndex = description.length, no display\n\n  const [descIndex, setDescIndex] = useState(0); // Ref for description button\n\n  const descRef = useRef(null);\n  const view = historyViews[historyViews.length - 1];\n  const [goalStates, setGoalStates] = useState(view.goals.map(_ => false)); // Refresh from server at the very beginning\n\n  useEffect(() => {\n    fetchInitLevelFromServer();\n  }, []);\n\n  const unselectHandCard = () => setHandSelected(-1);\n\n  const setHistoryViews = newViews => {\n    setHV(newViews);\n    setGoalStates(getGoalStates(newViews[newViews.length - 1]));\n  };\n\n  const pushAction = action => {\n    setActions(actions.concat(action));\n  };\n\n  const popAction = () => {\n    setActions(actions.slice(0, actions.length - 1));\n  };\n\n  const pushHistoryView = view => {\n    setHistoryViews(historyViews.concat(view));\n  };\n\n  const popHistoryView = () => {\n    setHistoryViews(historyViews.slice(0, historyViews.length - 1));\n  };\n\n  const doAction = action => {\n    const newView = doActionToView(view, action);\n    pushAction(action);\n    pushHistoryView(newView);\n    unselectHandCard();\n  };\n\n  const undoAction = () => {\n    if (actions.length > 0) {\n      popAction();\n      popHistoryView();\n    }\n  };\n\n  const clearHistory = () => {\n    while (actions.length > 0) {\n      undoAction();\n    }\n  };\n\n  const setNextDesc = () => {\n    if (descIndex == description.length) {\n      setDescIndex(0);\n    } else {\n      setDescIndex(descIndex + 1);\n    }\n  };\n\n  const collectAllVars = () => {\n    const set = new Set();\n\n    const collectOn = collection => {\n      collection.filter(card => [\"A\", \"B\", \"C\", \"D\"].includes(card)).forEach(v => set.add(v));\n    };\n\n    view.premises.forEach(([p, _]) => collectOn(p));\n    collectOn(view.handCardWithCount.map(([c, _]) => c));\n    collectOn(view.discardPile);\n    view.goals.forEach(goal => {\n      collectOn(goal.expr);\n    });\n    return Array.from(set).sort();\n  };\n\n  const fetchInitLevelFromServer = () => {\n    const config = {\n      params: {\n        levelID: levelID\n      }\n    };\n    Axios.get(Paths.levelRequest, config).then(res => {\n      console.log(res.data);\n      setHistoryViews([fixInfinityNumber(res.data.view)]);\n      setTexts([res.data.title, res.data.description]);\n    });\n  };\n\n  const menuAction = () => {\n    if (actions.length > 0) {\n      fetchInitLevelFromServer();\n    }\n\n    window.location.href = '../../levelPage/' + params.sid;\n  };\n\n  const submitAnswerToServer = () => {\n    const config = {\n      params: {\n        isSuccess: goalStates.reduce((a, b) => a && b)\n      }\n    };\n    Axios.get(Paths.levelSubmit, config).then(res => {\n      alert(res.data.msg);\n    });\n  };\n\n  const renderPremises = () => {\n    const result = [];\n\n    for (let i = 0; i < view.premises.length; i++) {\n      const [premise, isLocked] = view.premises[i];\n      result.push( /*#__PURE__*/React.createElement(PremiseComponent, {\n        cards: premise,\n        scale: 1,\n        isLocked: isLocked,\n        premiseIndex: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }\n    }, result.map(it => /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 27\n      }\n    }, it)));\n  };\n\n  const renderHandCardArea = () => {\n    return /*#__PURE__*/React.createElement(HandCardAreaComponent, {\n      playerVar: playAs,\n      cards: view.handCardWithCount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const renderGoals = () => {\n    return /*#__PURE__*/React.createElement(GoalsComponent, {\n      goals: view.goals,\n      isSuccessful: goalStates,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const renderTitle = () => {\n    return /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 12\n      }\n    }, title);\n  };\n\n  const renderDescription = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 12\n      }\n    }, description.map(it => /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 40\n      }\n    }, it)));\n  };\n\n  const renderButtonPanel = () => {\n    const buttonRef = /*#__PURE__*/React.createElement(Button, {\n      className: \"prettyButton\",\n      onClick: fetchInitLevelFromServer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 23\n      }\n    }, \"refresh\");\n    const buttonSubmit = /*#__PURE__*/React.createElement(Button, {\n      className: \"prettyButton\",\n      onClick: submitAnswerToServer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 26\n      }\n    }, \"submit\");\n    const buttonUndo = /*#__PURE__*/React.createElement(Button, {\n      className: \"prettyButton\",\n      onClick: undoAction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 24\n      }\n    }, \"Undo\");\n    const buttonMenu = /*#__PURE__*/React.createElement(Button, {\n      className: \"prettyButton\",\n      onClick: menuAction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 24\n      }\n    }, \"Back to menu\");\n    const buttonDesc = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      ref: descRef,\n      className: \"prettyButton\",\n      onClick: setNextDesc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 7\n      }\n    }, description.length == 0 ? \"No Hint\" : descIndex == description.length ? \"Show Hint\" : descIndex == description.length - 1 ? \"Hide Hint\" : \"next hint\"), /*#__PURE__*/React.createElement(Overlay, {\n      target: descRef.current,\n      show: descIndex != description.length,\n      placement: \"bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 7\n      }\n    }, props => /*#__PURE__*/React.createElement(Tooltip, Object.assign({\n      id: \"overlay-example\"\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }\n    }), description[descIndex])));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 12\n      }\n    }, [buttonRef, buttonSubmit, buttonUndo, buttonMenu, buttonDesc]);\n  };\n\n  return /*#__PURE__*/React.createElement(DndProvider, {\n    backend: HTML5Backend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      playerVar: playAs,\n      handSelected: handSelected,\n      handCardSelected: handSelected >= 0 ? view.handCardWithCount[handSelected][0] : undefined,\n      unselectHand: unselectHandCard,\n      pickHandCardCallback: handIndex => {\n        setHandSelected(handIndex);\n      },\n      moveHandCardToPremise: (premiseId, inPremiseIndex) => {\n        doAction(playCardsToAction(playAs, handSelected, [premiseId, inPremiseIndex]));\n      },\n      discardPickedHandCard: () => {\n        doAction(discardAction(playAs, handSelected));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, renderTitle()), renderPremises(), /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      width: \"50rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 15\n    }\n  }, renderHandCardArea()), /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      marginRight: \"30px\",\n      marginLeft: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }, renderButtonPanel())))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }, renderGoals())));\n};\n\nexport { LevelBoardComponent };","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/components/game/LevelBoard.tsx"],"names":["React","useState","useEffect","useRef","PremiseComponent","HandCardAreaComponent","DndProvider","HTML5Backend","Axios","Paths","doActionToView","getGoalStates","fixInfinityNumber","Table","Button","Overlay","Tooltip","Context","playCardsToAction","discardAction","variable","GoalsComponent","useParams","initialGameView","playerVar","handCardWithCount","discardPile","premises","deckCount","goals","kind","expr","boolTree","playAs","LevelBoardComponent","params","levelID","Number","console","log","sid","actions","setActions","handSelected","setHandSelected","historyViews","setHV","title","description","setTexts","descIndex","setDescIndex","descRef","view","length","goalStates","setGoalStates","map","_","fetchInitLevelFromServer","unselectHandCard","setHistoryViews","newViews","pushAction","action","concat","popAction","slice","pushHistoryView","popHistoryView","doAction","newView","undoAction","clearHistory","setNextDesc","collectAllVars","set","Set","collectOn","collection","filter","card","includes","forEach","v","add","p","c","goal","Array","from","sort","config","get","levelRequest","then","res","data","menuAction","window","location","href","submitAnswerToServer","isSuccess","reduce","a","b","levelSubmit","alert","msg","renderPremises","result","i","premise","isLocked","push","it","renderHandCardArea","renderGoals","renderTitle","renderDescription","renderButtonPanel","buttonRef","buttonSubmit","buttonUndo","buttonMenu","buttonDesc","current","props","handCardSelected","undefined","unselectHand","pickHandCardCallback","handIndex","moveHandCardToPremise","premiseId","inPremiseIndex","discardPickedHandCard","width","marginRight","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { PremiseComponent } from './Premise'\nimport { HandCardAreaComponent } from './HandCard'\nimport { Premise, GameView, GameAction, Card, TruthTableInString, LevelResponse } from '../../types'\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { DiscardArea } from './DiscardArea'\nimport Axios, { AxiosRequestConfig } from 'axios'\nimport SocketIOClient from 'socket.io-client'\nimport { Paths, SocketEvents } from '../../routesPaths'\nimport { doActionToView, playHandCardTo, getGoalStates, fixInfinityNumber } from '../../game/views'\nimport { Table, Button, Overlay, Tooltip } from 'react-bootstrap'\nimport Context from './gameContext'\nimport { playCardsToAction, discardAction } from '../../game/actions'\nimport { variable, BoolTree } from '../../server/gameApp/logicResolver/bools'\nimport { GoalsComponent } from './Goals'\nimport { useParams } from 'react-router'\n\nimport './Board.css'\n\ninterface LevelBoardParams {\n  sid: string\n  levelID: string\n}\n\nfunction initialGameView(playerVar: string): GameView {\n  return { \n    playerVar: playerVar,\n    handCardWithCount: [],\n    discardPile: [],\n    premises: [],\n    deckCount: 0,\n    goals: [{ kind: 'prove', expr: [playerVar as Card], boolTree: variable(playerVar) }]\n  }\n}\n\nconst playAs: Card = \"A\"\n\n// Game board\nconst LevelBoardComponent = () => {\n  // read router parameter\n  const params = useParams<LevelBoardParams>()\n  const levelID = Number(params.levelID)\n\n  console.log(params.sid, params.levelID);\n  \n\n  // Actions been taken in this round\n  const [actions, setActions] = useState([] as GameAction[])\n  // Which hand card is selected at now \n  // -1 if no card is selected\n  const [handSelected, setHandSelected] = useState(-1)\n  // History of views in this round\n  const [historyViews, setHV] = useState([initialGameView(\"A\")] as GameView[])\n  // Title and description for the current level\n  const [[title, description], setTexts] = useState([\"title\", [\"desciption\"]])\n  // which description to display, if descIndex = description.length, no display\n  const [descIndex, setDescIndex] = useState(0)\n  // Ref for description button\n  const descRef = useRef(null)\n\n  const view = historyViews[historyViews.length - 1]\n\n  const [goalStates, setGoalStates] = useState(view.goals.map(_ => false))\n\n\n  // Refresh from server at the very beginning\n  useEffect(() => {\n    fetchInitLevelFromServer()\n  }, [])\n\n  const unselectHandCard = () => setHandSelected(-1)\n\n  const setHistoryViews = (newViews: GameView[]) => {\n    setHV(newViews)\n    setGoalStates(getGoalStates(newViews[newViews.length - 1]))\n  }\n\n  const pushAction = (action: GameAction) => {\n    setActions(actions.concat(action))\n  }\n\n  const popAction = () => {\n    setActions(actions.slice(0, actions.length - 1))\n  }\n\n  const pushHistoryView = (view: GameView) => {\n    setHistoryViews(historyViews.concat(view))\n  }\n\n  const popHistoryView = () => {\n    setHistoryViews(historyViews.slice(0, historyViews.length - 1))\n  }\n\n  const doAction = (action: GameAction) => {\n    const newView = doActionToView(view, action)\n    pushAction(action)\n    pushHistoryView(newView)\n    unselectHandCard()\n  }\n\n  const undoAction = () => {\n    if (actions.length > 0) {\n      popAction()\n      popHistoryView()\n    }\n  }\n\n  const clearHistory = () => {\n    while (actions.length > 0) {\n      undoAction()\n    }\n  }\n\n  const setNextDesc = () => {\n    if (descIndex == description.length) {\n      setDescIndex(0)\n    } else {\n      setDescIndex(descIndex + 1)\n    }\n  }\n\n  const collectAllVars = (): Card[] => {\n    const set = new Set<Card>()\n    const collectOn = (collection: Card[]) => {\n      collection\n        .filter(card => ([\"A\", \"B\", \"C\", \"D\"]).includes(card))\n        .forEach(v => set.add(v))\n    }\n    view.premises.forEach(([p, _]) => collectOn(p))\n    collectOn(view.handCardWithCount.map(([c, _]) => c))\n    collectOn(view.discardPile)\n    view.goals.forEach(goal => {\n      collectOn(goal.expr)\n    })\n\n    return Array.from(set).sort()\n  }\n\n  const fetchInitLevelFromServer = () => {\n    const config: AxiosRequestConfig = {\n      params: {\n        levelID: levelID,\n      }\n    }\n    Axios.get<LevelResponse>(Paths.levelRequest, config)\n      .then(res => {\n        console.log(res.data);\n        setHistoryViews([fixInfinityNumber(res.data.view)])\n        setTexts([res.data.title, res.data.description])\n      })\n  }\n\n  const menuAction = () => {\n    if (actions.length > 0) {\n      fetchInitLevelFromServer()\n    }\n    window.location.href='../../levelPage/' + params.sid\n  }\n\n  const submitAnswerToServer = () => {\n    const config: AxiosRequestConfig = {\n      params: {\n        isSuccess: goalStates.reduce((a, b) => a && b)\n      }\n    }\n    Axios.get(Paths.levelSubmit, config)\n      .then(res => {\n        alert(res.data.msg);\n      })\n  }\n\n  const renderPremises = (): JSX.Element => {\n    const result: JSX.Element[] = []\n    for (let i = 0; i < view.premises.length; i++) {\n      const [premise, isLocked] = view.premises[i]\n      result.push(\n        <PremiseComponent \n          cards={premise} \n          scale={1}\n          isLocked={isLocked}\n          premiseIndex={i} \n        />\n      )\n    }\n    return (\n      <Table striped bordered hover>\n        {result.map(it => <tr>{it}</tr>)}\n      </Table>\n    )\n  }\n\n  const renderHandCardArea = (): JSX.Element => {\n    return <HandCardAreaComponent\n      playerVar={playAs}\n      cards={view.handCardWithCount}\n    />\n  }\n\n  const renderGoals = (): JSX.Element => {\n    return <GoalsComponent goals={view.goals} isSuccessful={goalStates} ></GoalsComponent>\n  }\n\n  const renderTitle = () => {\n    return <h2>{title}</h2>\n  }\n\n  const renderDescription = () => {\n    return <div>{description.map(it => <p>{it}</p>)}</div> \n  }\n\n  const renderButtonPanel = (): JSX.Element => {\n    const buttonRef = <Button className=\"prettyButton\" onClick={fetchInitLevelFromServer}>refresh</Button>\n    const buttonSubmit = <Button className=\"prettyButton\" onClick={submitAnswerToServer}>submit</Button>\n    const buttonUndo = <Button className=\"prettyButton\" onClick={undoAction}>Undo</Button>\n    const buttonMenu = <Button className=\"prettyButton\" onClick={menuAction}>Back to menu</Button>\n    const buttonDesc = <>\n      <Button ref={descRef} className=\"prettyButton\" onClick={setNextDesc}>{\n        description.length == 0 ? \"No Hint\" :\n        descIndex == description.length ? \"Show Hint\" : \n        descIndex == description.length - 1 ? \"Hide Hint\" :\n        \"next hint\"\n      }</Button>\n      <Overlay target={descRef.current} show={descIndex != description.length} placement=\"bottom\">\n        {(props) => (\n          <Tooltip id=\"overlay-example\" {...props}>\n            {description[descIndex]}\n          </Tooltip>\n        )}\n      </Overlay>\n    </>\n\n    return <div>{[buttonRef, buttonSubmit, buttonUndo, buttonMenu, buttonDesc]}</div>\n  }\n\n  return(\n    <DndProvider backend={HTML5Backend}>\n      <Context.Provider value={{\n          playerVar: playAs,\n          handSelected: handSelected,\n          handCardSelected: handSelected >= 0 ? view.handCardWithCount[handSelected][0] : undefined,\n          unselectHand: unselectHandCard,\n          pickHandCardCallback: (handIndex: number) => {\n            setHandSelected(handIndex)\n          },\n          moveHandCardToPremise: (premiseId: number, inPremiseIndex: number) => {\n            doAction(playCardsToAction(playAs, handSelected, [premiseId, inPremiseIndex]))\n          },\n          discardPickedHandCard: () => {\n            doAction(discardAction(playAs, handSelected))\n          }\n      }}>\n        <div className=\"status\">{renderTitle()}</div>\n        {renderPremises()}\n        <Table >\n          <tbody>\n            <tr>\n              <td style={{ width: \"50rem\"}}>{renderHandCardArea()}</td>\n              <td style={{ marginRight: \"30px\", marginLeft: \"auto\" }}>{renderButtonPanel()}</td>\n            </tr>\n          </tbody>\n        </Table>\n        <div className=\"board-row\">\n          {renderGoals()}\n        </div>\n      </Context.Provider>\n    </DndProvider>\n  )\n\n}\n\nexport { LevelBoardComponent }"]},"metadata":{},"sourceType":"module"}