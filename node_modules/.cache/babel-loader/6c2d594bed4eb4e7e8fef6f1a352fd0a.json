{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/IC/Computing/DRP/drp48/src/components/game/Goals.tsx\";\nimport React, { useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { PremiseComponent } from \"./Premise\";\nimport SUCCESSFUL_ICON from \"../../src_img/card_UI/correct.jpg\";\nimport UNSUCCESSFUL_ICON from \"../../src_img/card_UI/incorrect.jpg\";\nimport { genTruthTableInStringForBTrees } from \"../../server/gameApp/logicResolver/plainResolver\";\nimport { makeStyles, createStyles, Button as MButton, Popover, Typography, List, ListItem } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => createStyles({\n  typography: {\n    padding: theme.spacing(2)\n  }\n}));\nexport const GoalsComponent = ({\n  goals,\n  isSuccessful\n}) => {\n  const [showTable, setShowTable] = useState(goals.map(_ => false));\n  const classes = useStyles();\n  const [anchorEls, setAnchorEl] = React.useState(goals.map(_ => null));\n\n  const handleClick = i => event => {\n    const newAnchorEls = anchorEls.slice();\n    newAnchorEls.splice(i, 1, event.currentTarget);\n    setAnchorEl(newAnchorEls);\n  };\n\n  const handleClose = i => () => {\n    const newAnchorEls = anchorEls.slice();\n    newAnchorEls.splice(i, 1, null);\n    setAnchorEl(newAnchorEls);\n  };\n\n  const ids = anchorEls.map((a, i) => a ? \"popover\" + i : undefined);\n\n  const setShowOneTable = (i, isShow) => {\n    setShowTable(showTable.map((old, j) => i == j ? isShow : old));\n  };\n\n  const renderSuccessful = i => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"30px\",\n        height: \"30px\",\n        backgroundImage: \"url(\" + (isSuccessful[i] ? SUCCESSFUL_ICON : UNSUCCESSFUL_ICON) + \")\",\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    });\n  };\n\n  const collectVars = i => {\n    var _goals$i$expr;\n\n    const set = new Set();\n    (_goals$i$expr = goals[i].expr) === null || _goals$i$expr === void 0 ? void 0 : _goals$i$expr.filter(c => [\"A\", \"B\", \"C\", \"D\"].includes(c)).forEach(c => set.add(c));\n    return Array.from(set);\n  };\n\n  const renderShowTableButton = i => {\n    if (goals[i].expr == undefined) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MButton, {\n      \"aria-describedby\": ids[i],\n      onClick: handleClick(i),\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, \"Hint\"), /*#__PURE__*/React.createElement(Popover, {\n      id: ids[i],\n      open: Boolean(ids[i]),\n      anchorEl: anchorEls[i],\n      onClose: handleClose(i),\n      anchorOrigin: {\n        vertical: \"center\",\n        horizontal: \"right\"\n      },\n      transformOrigin: {\n        vertical: \"center\",\n        horizontal: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: classes.typography,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, renderTruthTable(i))));\n  };\n\n  const renderTruthTable = i => {\n    const vars = collectVars(i);\n    const truthTable = genTruthTableInStringForBTrees(vars, [goals[i].boolTree]);\n    return /*#__PURE__*/React.createElement(Table, {\n      onClick: () => setShowOneTable(i, false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, truthTable.headers.map(it => /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        paddingTop: \"0.25rem\",\n        paddingBottom: \"0.25rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, it))), truthTable.body.map(row => /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, row.map(it => /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        paddingTop: \"1px\",\n        paddingBottom: \"1px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, it)))));\n  };\n\n  const showGoalInCards = goal => {\n    switch (goal.kind) {\n      case \"tautology\":\n      case \"paradox\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 16\n          }\n        });\n    }\n\n    return /*#__PURE__*/React.createElement(PremiseComponent, {\n      scale: 0.5,\n      premiseIndex: -1,\n      isLocked: true,\n      isProofPremise: false,\n      cards: goal.expr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    });\n  };\n\n  const renderGoal = i => {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }, renderSuccessful(i)), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        verticalAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      style: {\n        marginLeft: \"10px\",\n        marginRight: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, showGoalKind(i + 1, goals[i]))), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }, showGoalInCards(goals[i])), /*#__PURE__*/React.createElement(\"td\", {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, renderShowTableButton(i)));\n  };\n\n  const renderGoals = () => {\n    const result = [];\n\n    for (let i = 0; i < goals.length; i++) {\n      result.push(renderGoal(i));\n    }\n\n    return /*#__PURE__*/React.createElement(List, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 12\n      }\n    }, result);\n  };\n\n  return renderGoals();\n};\n\nfunction showGoalKind(index, goal) {\n  let showKind;\n\n  switch (goal.kind) {\n    case \"prove\":\n      showKind = \"To prove:\";\n      break;\n\n    case \"disprove\":\n      showKind = \"To disprove:\";\n      break;\n\n    case \"unknown\":\n      showKind = \"Make undecidable:\";\n      break;\n\n    case \"equivalent\":\n      showKind = \"To be equivalent to:\";\n      break;\n\n    case \"tautology\":\n      showKind = \"Make a tautology\";\n      break;\n\n    case \"paradox\":\n      showKind = \"Make a paradox\";\n      break;\n  }\n\n  return index + \". \" + showKind + \" \";\n}","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/components/game/Goals.tsx"],"names":["React","useState","Table","PremiseComponent","SUCCESSFUL_ICON","UNSUCCESSFUL_ICON","genTruthTableInStringForBTrees","makeStyles","createStyles","Button","MButton","Popover","Typography","List","ListItem","useStyles","theme","typography","padding","spacing","GoalsComponent","goals","isSuccessful","showTable","setShowTable","map","_","classes","anchorEls","setAnchorEl","handleClick","i","event","newAnchorEls","slice","splice","currentTarget","handleClose","ids","a","undefined","setShowOneTable","isShow","old","j","renderSuccessful","width","height","backgroundImage","backgroundSize","backgroundRepeat","collectVars","set","Set","expr","filter","c","includes","forEach","add","Array","from","renderShowTableButton","Boolean","vertical","horizontal","renderTruthTable","vars","truthTable","boolTree","headers","it","paddingTop","paddingBottom","body","row","showGoalInCards","goal","kind","renderGoal","verticalAlign","marginLeft","marginRight","showGoalKind","renderGoals","result","length","push","index","showKind"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Goal } from \"../../types\";\nimport { Card, Table, Button } from \"react-bootstrap\";\nimport { PremiseComponent } from \"./Premise\";\nimport * as Types from \"../../types\";\nimport SUCCESSFUL_ICON from \"../../src_img/card_UI/correct.jpg\";\nimport UNSUCCESSFUL_ICON from \"../../src_img/card_UI/incorrect.jpg\";\nimport { genTruthTableInStringForBTrees } from \"../../server/gameApp/logicResolver/plainResolver\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Button as MButton,\n  Popover,\n  Typography,\n  List,\n  ListItem,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    typography: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\ninterface GoalsProps {\n  goals: Goal[];\n  isSuccessful: boolean[];\n}\n\nexport const GoalsComponent = ({ goals, isSuccessful }: GoalsProps) => {\n  const [showTable, setShowTable] = useState(goals.map((_) => false));\n\n  const classes = useStyles();\n  const [anchorEls, setAnchorEl] = React.useState<(HTMLButtonElement | null)[]>(\n    goals.map((_) => null)\n  );\n  const handleClick = (i: number) => (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    const newAnchorEls = anchorEls.slice();\n    newAnchorEls.splice(i, 1, event.currentTarget);\n    setAnchorEl(newAnchorEls);\n  };\n  const handleClose = (i: number) => () => {\n    const newAnchorEls = anchorEls.slice();\n    newAnchorEls.splice(i, 1, null);\n    setAnchorEl(newAnchorEls);\n  };\n\n  const ids = anchorEls.map((a, i) => (a ? \"popover\" + i : undefined));\n\n  const setShowOneTable = (i: number, isShow: boolean) => {\n    setShowTable(showTable.map((old, j) => (i == j ? isShow : old)));\n  };\n\n  const renderSuccessful = (i: number) => {\n    return (\n      <div\n        style={{\n          width: \"30px\",\n          height: \"30px\",\n          backgroundImage:\n            \"url(\" +\n            (isSuccessful[i] ? SUCCESSFUL_ICON : UNSUCCESSFUL_ICON) +\n            \")\",\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n        }}\n      ></div>\n    );\n  };\n\n  const collectVars = (i: number): Types.Card[] => {\n    const set = new Set<Types.Card>();\n    goals[i].expr\n      ?.filter((c) => [\"A\", \"B\", \"C\", \"D\"].includes(c))\n      .forEach((c) => set.add(c));\n    return Array.from(set);\n  };\n\n  const renderShowTableButton = (i: number) => {\n    if (goals[i].expr == undefined) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <MButton\n          aria-describedby={ids[i]}\n          onClick={handleClick(i)}\n          color=\"primary\"\n        >\n          Hint\n        </MButton>\n        <Popover\n          id={ids[i]}\n          open={Boolean(ids[i])}\n          anchorEl={anchorEls[i]}\n          onClose={handleClose(i)}\n          anchorOrigin={{\n            vertical: \"center\",\n            horizontal: \"right\",\n          }}\n          transformOrigin={{\n            vertical: \"center\",\n            horizontal: \"left\",\n          }}\n        >\n          <Typography className={classes.typography}>\n            {renderTruthTable(i)}\n          </Typography>\n        </Popover>\n      </div>\n    );\n  };\n\n  const renderTruthTable = (i: number) => {\n    const vars = collectVars(i);\n    const truthTable = genTruthTableInStringForBTrees(vars, [\n      goals[i].boolTree,\n    ]);\n    return (\n      <Table onClick={() => setShowOneTable(i, false)}>\n        <thead>\n          {truthTable.headers.map((it) => (\n            <td style={{ paddingTop: \"0.25rem\", paddingBottom: \"0.25rem\" }}>\n              {it}\n            </td>\n          ))}\n        </thead>\n        {truthTable.body.map((row) => (\n          <tr>\n            {row.map((it) => (\n              <td style={{ paddingTop: \"1px\", paddingBottom: \"1px\" }}>{it}</td>\n            ))}\n          </tr>\n        ))}\n      </Table>\n    );\n  };\n\n  const showGoalInCards = (goal: Goal): JSX.Element => {\n    switch (goal.kind) {\n      case \"tautology\":\n      case \"paradox\":\n        return <div></div>;\n    }\n    return (\n      <PremiseComponent\n        scale={0.5}\n        premiseIndex={-1}\n        isLocked={true}\n        isProofPremise={false}\n        cards={goal.expr}\n      />\n    );\n  };\n\n  const renderGoal = (i: number) => {\n    return (\n      <ListItem>\n        <td>{renderSuccessful(i)}</td>\n        <td style={{ verticalAlign: \"center\" }}>\n          {\n            <h4 style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>\n              {showGoalKind(i + 1, goals[i])}\n            </h4>\n          }\n        </td>\n        <td>{showGoalInCards(goals[i])}</td>\n        <td align=\"right\">{renderShowTableButton(i)}</td>\n      </ListItem>\n    );\n  };\n\n  const renderGoals = () => {\n    const result: JSX.Element[] = [];\n    for (let i = 0; i < goals.length; i++) {\n      result.push(renderGoal(i));\n    }\n    return <List>{result}</List>;\n  };\n\n  return renderGoals();\n};\n\nfunction showGoalKind(index: number, goal: Goal): string {\n  let showKind: string;\n  switch (goal.kind) {\n    case \"prove\":\n      showKind = \"To prove:\";\n      break;\n    case \"disprove\":\n      showKind = \"To disprove:\";\n      break;\n    case \"unknown\":\n      showKind = \"Make undecidable:\";\n      break;\n    case \"equivalent\":\n      showKind = \"To be equivalent to:\";\n      break;\n    case \"tautology\":\n      showKind = \"Make a tautology\";\n      break;\n    case \"paradox\":\n      showKind = \"Make a paradox\";\n      break;\n  }\n  return index + \". \" + showKind + \" \";\n}\n"]},"metadata":{},"sourceType":"module"}