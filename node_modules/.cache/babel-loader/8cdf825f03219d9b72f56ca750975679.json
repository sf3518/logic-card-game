{"ast":null,"code":"import { parsePremise, parsePremiseSafe } from \"./premise\";\nexport function showGoal(goal) {\n  var _goal$expr;\n\n  const showKind = goal.kind == 'prove' ? \"To prove\" : goal.kind == 'disprove' ? \"To disprove\" : \"Make undecidable\";\n  const showGoal = (_goal$expr = goal.expr) === null || _goal$expr === void 0 ? void 0 : _goal$expr.join(\"\");\n  return showKind + \": [\" + showGoal + \"]\";\n}\nexport function fromGoalJson(json) {\n  switch (json.kind) {\n    case 'tautology':\n    case 'paradox':\n      return {\n        kind: json.kind,\n        expr: undefined,\n        boolTree: undefined\n      };\n  }\n\n  return {\n    kind: json.kind,\n    expr: json.expr,\n    boolTree: parsePremise(json.expr, [\"A\", \"B\", \"C\", \"D\"])\n  };\n}\nexport function getExprFromJson(json) {\n  switch (json.kind) {\n    case 'tautology':\n    case 'paradox':\n      return [];\n\n    default:\n      return json.expr;\n  }\n}\nexport function parseGoalTreeSafe(json) {\n  switch (json.kind) {\n    case 'tautology':\n    case 'paradox':\n      return undefined;\n\n    default:\n      return parsePremiseSafe(json.expr);\n  }\n}","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/server/gameApp/game/goal.ts"],"names":["parsePremise","parsePremiseSafe","showGoal","goal","showKind","kind","expr","join","fromGoalJson","json","undefined","boolTree","getExprFromJson","parseGoalTreeSafe"],"mappings":"AACA,SAASA,YAAT,EAAuBC,gBAAvB,QAA+C,WAA/C;AAGA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAsC;AAAA;;AAC3C,QAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAL,IAAa,OAAb,GAAuB,UAAvB,GACAF,IAAI,CAACE,IAAL,IAAa,UAAb,GAA0B,aAA1B,GACA,kBAFjB;AAGA,QAAMH,QAAQ,iBAAGC,IAAI,CAACG,IAAR,+CAAG,WAAWC,IAAX,CAAgB,EAAhB,CAAjB;AACA,SAAOH,QAAQ,GAAG,KAAX,GAAmBF,QAAnB,GAA8B,GAArC;AACD;AAED,OAAO,SAASM,YAAT,CAAsBC,IAAtB,EAA8C;AACnD,UAAOA,IAAI,CAACJ,IAAZ;AACE,SAAK,WAAL;AACA,SAAK,SAAL;AACE,aAAO;AAAEA,QAAAA,IAAI,EAAEI,IAAI,CAACJ,IAAb;AAAmBC,QAAAA,IAAI,EAAEI,SAAzB;AAAoCC,QAAAA,QAAQ,EAAED;AAA9C,OAAP;AAHJ;;AAKA,SAAO;AACLL,IAAAA,IAAI,EAAEI,IAAI,CAACJ,IADN;AAELC,IAAAA,IAAI,EAAEG,IAAI,CAACH,IAFN;AAGLK,IAAAA,QAAQ,EAAEX,YAAY,CAACS,IAAI,CAACH,IAAN,EAAY,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAZ;AAHjB,GAAP;AAKD;AAED,OAAO,SAASM,eAAT,CAAyBH,IAAzB,EAAmD;AACxD,UAAQA,IAAI,CAACJ,IAAb;AACE,SAAK,WAAL;AACA,SAAK,SAAL;AACE,aAAO,EAAP;;AACF;AACE,aAAOI,IAAI,CAACH,IAAZ;AALJ;AAOD;AAED,OAAO,SAASO,iBAAT,CAA2BJ,IAA3B,EAAmE;AACxE,UAAQA,IAAI,CAACJ,IAAb;AACE,SAAK,WAAL;AACA,SAAK,SAAL;AACE,aAAOK,SAAP;;AACF;AACE,aAAOT,gBAAgB,CAACQ,IAAI,CAACH,IAAN,CAAvB;AALJ;AAOD","sourcesContent":["import { Goal, GoalInJSON, Card } from \"../../../types\";\nimport { parsePremise, parsePremiseSafe } from \"./premise\";\nimport { BoolTree } from \"../logicResolver/bools\";\n\nexport function showGoal(goal: Goal): string {\n  const showKind = goal.kind == 'prove' ? \"To prove\" \n                 : goal.kind == 'disprove' ? \"To disprove\" \n                 : \"Make undecidable\"\n  const showGoal = goal.expr?.join(\"\")\n  return showKind + \": [\" + showGoal + \"]\"\n}\n\nexport function fromGoalJson(json: GoalInJSON): Goal {\n  switch(json.kind) {\n    case 'tautology':\n    case 'paradox':\n      return { kind: json.kind, expr: undefined, boolTree: undefined}\n  }\n  return {\n    kind: json.kind,\n    expr: json.expr, \n    boolTree: parsePremise(json.expr, [\"A\", \"B\", \"C\", \"D\"])\n  }\n}\n\nexport function getExprFromJson(json: GoalInJSON): Card[] {\n  switch (json.kind) {\n    case 'tautology':\n    case 'paradox':\n      return []\n    default:\n      return json.expr\n  }\n}\n\nexport function parseGoalTreeSafe(json: GoalInJSON): BoolTree | undefined {\n  switch (json.kind) {\n    case 'tautology':\n    case 'paradox':\n      return undefined\n    default:\n      return parsePremiseSafe(json.expr)\n  }\n}"]},"metadata":{},"sourceType":"module"}