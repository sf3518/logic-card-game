{"ast":null,"code":"import React,{useContext}from'react';import{CardComponent}from'./Card';import{PremiseClickSlot}from'./PremiseClickSlot';import Context from'./gameContext';import LockIcon from'@material-ui/icons/Lock';export var PremiseComponent=function PremiseComponent(_ref){var premiseIndex=_ref.premiseIndex,isLocked=_ref.isLocked,isProofPremise=_ref.isProofPremise,scale=_ref.scale,cards=_ref.cards;var context=useContext(Context);var renderCard=function renderCard(i){return/*#__PURE__*/React.createElement(CardComponent,{cardSymbol:cards[i],scale:scale,tag:undefined,onClick:function onClick(){},isSelected:false});};var renderDropSlot=function renderDropSlot(i){var slotLocked=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return/*#__PURE__*/React.createElement(PremiseClickSlot,{premiseIndex:premiseIndex,isLocked:isLocked||slotLocked,slotPosition:i});};var renderLock=function renderLock(){return/*#__PURE__*/React.createElement(\"div\",{style:{position:'absolute',left:40,marginTop:'40px'}},/*#__PURE__*/React.createElement(LockIcon,null),\"Locked\");};var renderPremise=function renderPremise(){var result=[];if(cards.length==0){result.push(renderDropSlot(0,true));}for(var i=0;i<cards.length;i++){if(context.handCardSelected&&!isLocked){result.push(renderDropSlot(i));}result.push(renderCard(i));}if(context.handCardSelected&&!isLocked){result.push(renderDropSlot(cards.length));}return result;};return/*#__PURE__*/React.createElement(\"div\",{className:\"board-row\",style:{display:'flex',flexWrap:'wrap',float:\"none\",justifyContent:\"center\",verticalAlign:\"center\",marginTop:\"5px\",marginBottom:\"5px\",marginLeft:\"auto\",marginRight:\"auto\",backgroundColor:isProofPremise&&isLocked?'#CCC':'white'}},renderPremise(),isProofPremise&&isLocked?renderLock():undefined);};","map":{"version":3,"sources":["/Users/johnny/IC/Computing/year2/DRP/drp48/src/components/game/Premise.tsx"],"names":["React","useContext","CardComponent","PremiseClickSlot","Context","LockIcon","PremiseComponent","premiseIndex","isLocked","isProofPremise","scale","cards","context","renderCard","i","undefined","renderDropSlot","slotLocked","renderLock","position","left","marginTop","renderPremise","result","length","push","handCardSelected","display","flexWrap","float","justifyContent","verticalAlign","marginBottom","marginLeft","marginRight","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { Card, Premise } from '../../types'\nimport { CardComponent } from './Card'\nimport { useDrop } from 'react-dnd'\nimport { ItemTypes } from './ItemTypes'\nimport { PremiseClickSlot } from './PremiseClickSlot'\nimport Context from './gameContext'\n\nimport LockIcon from '@material-ui/icons/Lock'\n\ninterface PremiseProps {\n  premiseIndex: number\n  isLocked: boolean\n  isProofPremise: boolean\n  scale: number\n  cards: Premise\n}\n\n\nexport const PremiseComponent = ({\n  premiseIndex,\n  isLocked,\n  isProofPremise,\n  scale,\n  cards,\n}: PremiseProps) => {\n\n  const context = useContext(Context)\n\n  const renderCard = (i: number): JSX.Element => {\n    return (<CardComponent cardSymbol={cards[i]} scale={scale} tag={undefined} onClick={() => {}} isSelected={false} />)\n  }\n\n  const renderDropSlot = (i: number, slotLocked: boolean = false): JSX.Element => {\n    return (\n        <PremiseClickSlot \n          premiseIndex={premiseIndex}\n          isLocked={isLocked || slotLocked}\n          slotPosition={i}\n        />\n    )\n  }\n\n  const renderLock = () => {\n    return <div style={{\n      position: 'absolute',\n      left: 40,\n      marginTop: '40px',\n    }}>\n      <LockIcon/>\n      Locked\n    </div>\n  }\n\n  const renderPremise = (): JSX.Element[] => {\n    let result: JSX.Element[] = []\n    if (cards.length == 0) {\n      result.push(renderDropSlot(0, true))\n    }\n    for (let i = 0; i < cards.length; i++) {\n      if (context.handCardSelected && !isLocked) {\n        result.push(renderDropSlot(i))\n      }\n      result.push(renderCard(i))\n    }\n    if (context.handCardSelected && !isLocked) {\n      result.push(renderDropSlot(cards.length))\n    }\n    return result\n  }\n\n  return (\n    <div \n      className=\"board-row\" style={\n      {\n        display: 'flex',\n        flexWrap: 'wrap', \n        float: \"none\",\n        justifyContent: \"center\",\n        verticalAlign: \"center\",\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        backgroundColor: isProofPremise && isLocked ? '#CCC' : 'white'\n      }\n    }> \n      {renderPremise()}\n      {isProofPremise && isLocked ? renderLock() : undefined}\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}