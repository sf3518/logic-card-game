{"ast":null,"code":"import { iff, implies, or, and, not } from \"../logicResolver/bools\";\nexport class OperatorTable {\n  constructor(binOps, unaryOps) {\n    this.binOpDic = void 0;\n    this.unaryOps = void 0;\n    this.binOpDic = {};\n    binOps.forEach(([op, precedence, fix, nodeFunc]) => {\n      this.binOpDic[op] = {\n        precedence: precedence,\n        fixivity: fix,\n        nodeFunc: nodeFunc\n      };\n    });\n    this.unaryOps = {};\n    unaryOps.forEach(([op, nodeFunc]) => {\n      this.unaryOps[op] = {\n        nodeFunc: nodeFunc\n      };\n    });\n  }\n\n  static defaultTable() {\n    return new OperatorTable([[\"==\", 4, 'infixl', iff], [\"->\", 3, 'infixr', implies], [\"|\", 2, 'infixl', or], [\"&\", 1, 'infixl', and]], [[\"~\", not]]);\n  }\n\n  isBinaryOperator(operator) {\n    return this.binOpDic.hasOwnProperty(operator);\n  }\n\n  isUnaryOperator(operator) {\n    return this.unaryOps.hasOwnProperty(operator);\n  }\n\n  isOperator(card) {\n    return this.isUnaryOperator(card) || this.isBinaryOperator(card);\n  }\n\n}","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/server/gameApp/game/operatorTable.ts"],"names":["iff","implies","or","and","not","OperatorTable","constructor","binOps","unaryOps","binOpDic","forEach","op","precedence","fix","nodeFunc","fixivity","defaultTable","isBinaryOperator","operator","hasOwnProperty","isUnaryOperator","isOperator","card"],"mappings":"AAAA,SAAmBA,GAAnB,EAAwBC,OAAxB,EAAiCC,EAAjC,EAAqCC,GAArC,EAA0CC,GAA1C,QAAqD,wBAArD;AAQA,OAAO,MAAMC,aAAN,CAAoB;AAKzBC,EAAAA,WAAW,CAACC,MAAD,EAA0DC,QAA1D,EAAmG;AAAA,SAHrGC,QAGqG;AAAA,SAFrGD,QAEqG;AAC5G,SAAKC,QAAL,GAAgB,EAAhB;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAe,CAAC,CAACC,EAAD,EAAKC,UAAL,EAAiBC,GAAjB,EAAsBC,QAAtB,CAAD,KAAqC;AAClD,WAAKL,QAAL,CAAcE,EAAd,IAAoB;AAAEC,QAAAA,UAAU,EAAEA,UAAd;AAA0BG,QAAAA,QAAQ,EAAEF,GAApC;AAAyCC,QAAAA,QAAQ,EAAEA;AAAnD,OAApB;AACD,KAFD;AAGA,SAAKN,QAAL,GAAgB,EAAhB;AACAA,IAAAA,QAAQ,CAACE,OAAT,CAAiB,CAAC,CAACC,EAAD,EAAKG,QAAL,CAAD,KAAoB;AACnC,WAAKN,QAAL,CAAcG,EAAd,IAAoB;AAAEG,QAAAA,QAAQ,EAAEA;AAAZ,OAApB;AACD,KAFD;AAGD;;AAED,SAAOE,YAAP,GAAqC;AACnC,WAAO,IAAIX,aAAJ,CACL,CACE,CAAC,IAAD,EAAO,CAAP,EAAU,QAAV,EAAoBL,GAApB,CADF,EAEE,CAAC,IAAD,EAAO,CAAP,EAAU,QAAV,EAAoBC,OAApB,CAFF,EAGE,CAAC,GAAD,EAAM,CAAN,EAAS,QAAT,EAAmBC,EAAnB,CAHF,EAIE,CAAC,GAAD,EAAM,CAAN,EAAS,QAAT,EAAmBC,GAAnB,CAJF,CADK,EAOL,CAAC,CAAC,GAAD,EAAMC,GAAN,CAAD,CAPK,CAAP;AASD;;AAEDa,EAAAA,gBAAgB,CAACC,QAAD,EAA0B;AACxC,WAAO,KAAKT,QAAL,CAAcU,cAAd,CAA6BD,QAA7B,CAAP;AACD;;AAEDE,EAAAA,eAAe,CAACF,QAAD,EAA0B;AACvC,WAAO,KAAKV,QAAL,CAAcW,cAAd,CAA6BD,QAA7B,CAAP;AACD;;AAEDG,EAAAA,UAAU,CAACC,IAAD,EAAsB;AAC9B,WAAO,KAAKF,eAAL,CAAqBE,IAArB,KAA8B,KAAKL,gBAAL,CAAsBK,IAAtB,CAArC;AACD;;AAtCwB","sourcesContent":["import { BoolTree, iff, implies, or, and, not } from \"../logicResolver/bools\"\nimport { Card } from \"../../../types\"\n\nexport type Fixivity = 'infixl' | 'infixr'\n\nexport type BinaryConstructor = (b1: BoolTree, b2: BoolTree) => BoolTree\nexport type UnaryConstructor = (b: BoolTree) => BoolTree\n\nexport class OperatorTable {\n\n  readonly binOpDic: { [operator: string]: { precedence: number, fixivity: Fixivity, nodeFunc: BinaryConstructor } }\n  readonly unaryOps: { [operator: string]: { nodeFunc: UnaryConstructor } }\n\n  constructor(binOps: [string, number, Fixivity, BinaryConstructor][], unaryOps: [string, UnaryConstructor][] ) {\n    this.binOpDic = {}\n    binOps.forEach(([op, precedence, fix, nodeFunc]) => {\n      this.binOpDic[op] = { precedence: precedence, fixivity: fix, nodeFunc: nodeFunc }\n    })\n    this.unaryOps = {}\n    unaryOps.forEach(([op, nodeFunc]) => {\n      this.unaryOps[op] = { nodeFunc: nodeFunc }\n    })\n  }\n\n  static defaultTable(): OperatorTable {\n    return new OperatorTable(\n      [\n        [\"==\", 4, 'infixl', iff],\n        [\"->\", 3, 'infixr', implies],\n        [\"|\", 2, 'infixl', or],\n        [\"&\", 1, 'infixl', and],\n      ],\n      [[\"~\", not]]\n    )\n  }\n\n  isBinaryOperator(operator: Card): boolean {\n    return this.binOpDic.hasOwnProperty(operator)\n  }\n\n  isUnaryOperator(operator: Card): boolean {\n    return this.unaryOps.hasOwnProperty(operator)\n  }\n\n  isOperator(card: Card): boolean {\n    return this.isUnaryOperator(card) || this.isBinaryOperator(card)\n  }\n}"]},"metadata":{},"sourceType":"module"}