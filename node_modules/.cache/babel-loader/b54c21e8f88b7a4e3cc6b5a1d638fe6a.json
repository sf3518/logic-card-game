{"ast":null,"code":"import{parsePremise,parsePremiseSafe}from\"./premise\";export function showGoal(goal){var _goal$expr;var showKind=goal.kind=='prove'?\"To prove\":goal.kind=='disprove'?\"To disprove\":\"Make undecidable\";var showGoal=(_goal$expr=goal.expr)===null||_goal$expr===void 0?void 0:_goal$expr.join(\"\");return showKind+\": [\"+showGoal+\"]\";}export function fromGoalJson(json){switch(json.kind){case'tautology':case'paradox':return{kind:json.kind,expr:undefined,boolTree:undefined};}return{kind:json.kind,expr:json.expr,boolTree:parsePremise(json.expr,[\"A\",\"B\",\"C\",\"D\"])};}export function getExprFromJson(json){switch(json.kind){case'tautology':case'paradox':return[];default:return json.expr;}}export function parseGoalTreeSafe(json){switch(json.kind){case'tautology':case'paradox':return undefined;default:return parsePremiseSafe(json.expr);}}","map":{"version":3,"sources":["/Users/johnny/IC/Computing/year2/DRP/drp48/src/server/gameApp/game/goal.ts"],"names":["parsePremise","parsePremiseSafe","showGoal","goal","showKind","kind","expr","join","fromGoalJson","json","undefined","boolTree","getExprFromJson","parseGoalTreeSafe"],"mappings":"AACA,OAASA,YAAT,CAAuBC,gBAAvB,KAA+C,WAA/C,CAGA,MAAO,SAASC,CAAAA,QAAT,CAAkBC,IAAlB,CAAsC,gBAC3C,GAAMC,CAAAA,QAAQ,CAAGD,IAAI,CAACE,IAAL,EAAa,OAAb,CAAuB,UAAvB,CACAF,IAAI,CAACE,IAAL,EAAa,UAAb,CAA0B,aAA1B,CACA,kBAFjB,CAGA,GAAMH,CAAAA,QAAQ,aAAGC,IAAI,CAACG,IAAR,qCAAG,WAAWC,IAAX,CAAgB,EAAhB,CAAjB,CACA,MAAOH,CAAAA,QAAQ,CAAG,KAAX,CAAmBF,QAAnB,CAA8B,GAArC,CACD,CAED,MAAO,SAASM,CAAAA,YAAT,CAAsBC,IAAtB,CAA8C,CACnD,OAAOA,IAAI,CAACJ,IAAZ,EACE,IAAK,WAAL,CACA,IAAK,SAAL,CACE,MAAO,CAAEA,IAAI,CAAEI,IAAI,CAACJ,IAAb,CAAmBC,IAAI,CAAEI,SAAzB,CAAoCC,QAAQ,CAAED,SAA9C,CAAP,CAHJ,CAKA,MAAO,CACLL,IAAI,CAAEI,IAAI,CAACJ,IADN,CAELC,IAAI,CAAEG,IAAI,CAACH,IAFN,CAGLK,QAAQ,CAAEX,YAAY,CAACS,IAAI,CAACH,IAAN,CAAY,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,GAAhB,CAAZ,CAHjB,CAAP,CAKD,CAED,MAAO,SAASM,CAAAA,eAAT,CAAyBH,IAAzB,CAAmD,CACxD,OAAQA,IAAI,CAACJ,IAAb,EACE,IAAK,WAAL,CACA,IAAK,SAAL,CACE,MAAO,EAAP,CACF,QACE,MAAOI,CAAAA,IAAI,CAACH,IAAZ,CALJ,CAOD,CAED,MAAO,SAASO,CAAAA,iBAAT,CAA2BJ,IAA3B,CAAmE,CACxE,OAAQA,IAAI,CAACJ,IAAb,EACE,IAAK,WAAL,CACA,IAAK,SAAL,CACE,MAAOK,CAAAA,SAAP,CACF,QACE,MAAOT,CAAAA,gBAAgB,CAACQ,IAAI,CAACH,IAAN,CAAvB,CALJ,CAOD","sourcesContent":["import { Goal, GoalInJSON, Card } from \"../../../types\";\nimport { parsePremise, parsePremiseSafe } from \"./premise\";\nimport { BoolTree } from \"../logicResolver/bools\";\n\nexport function showGoal(goal: Goal): string {\n  const showKind = goal.kind == 'prove' ? \"To prove\" \n                 : goal.kind == 'disprove' ? \"To disprove\" \n                 : \"Make undecidable\"\n  const showGoal = goal.expr?.join(\"\")\n  return showKind + \": [\" + showGoal + \"]\"\n}\n\nexport function fromGoalJson(json: GoalInJSON): Goal {\n  switch(json.kind) {\n    case 'tautology':\n    case 'paradox':\n      return { kind: json.kind, expr: undefined, boolTree: undefined}\n  }\n  return {\n    kind: json.kind,\n    expr: json.expr, \n    boolTree: parsePremise(json.expr, [\"A\", \"B\", \"C\", \"D\"])\n  }\n}\n\nexport function getExprFromJson(json: GoalInJSON): Card[] {\n  switch (json.kind) {\n    case 'tautology':\n    case 'paradox':\n      return []\n    default:\n      return json.expr\n  }\n}\n\nexport function parseGoalTreeSafe(json: GoalInJSON): BoolTree | undefined {\n  switch (json.kind) {\n    case 'tautology':\n    case 'paradox':\n      return undefined\n    default:\n      return parsePremiseSafe(json.expr)\n  }\n}"]},"metadata":{},"sourceType":"module"}