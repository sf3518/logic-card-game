{"ast":null,"code":"import _classCallCheck from\"/Users/johnny/IC/Computing/year2/DRP/drp48/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/johnny/IC/Computing/year2/DRP/drp48/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";export var UnaryOperator=/*#__PURE__*/function(){_createClass(UnaryOperator,null,[{key:\"apply\",value:function apply(op,b){return UnaryOperator.unaryOpFuncTable[op.sign](b);}}]);function UnaryOperator(sign){_classCallCheck(this,UnaryOperator);this.sign=void 0;this.sign=sign;}return UnaryOperator;}();UnaryOperator.unaryOpFuncTable={'~':function _(b){return!b;}};export var BinaryOperator=/*#__PURE__*/function(){_createClass(BinaryOperator,null,[{key:\"apply\",value:function apply(op,b1,b2){return BinaryOperator.binaryOpFuncTable[op.sign](b1,b2);}}]);function BinaryOperator(sign){_classCallCheck(this,BinaryOperator);this.sign=void 0;this.sign=sign;}return BinaryOperator;}();BinaryOperator.binaryOpFuncTable={'&':function _(b1,b2){return b1&&b2;},'|':function _(b1,b2){return b1||b2;},'->':function _(b1,b2){return!b1||b2;},'==':function _(b1,b2){return b1==b2;}};var BoolConstant=function BoolConstant(value){_classCallCheck(this,BoolConstant);this.kind=\"constant\";this.value=void 0;this.value=value;};var BoolVariable=function BoolVariable(variable){_classCallCheck(this,BoolVariable);this.kind=\"variable\";this.variable=void 0;this.variable=variable;};var BoolUnary=function BoolUnary(sign,child){_classCallCheck(this,BoolUnary);this.kind=\"unary\";this.operator=void 0;this.child=void 0;this.operator=new UnaryOperator(sign);this.child=child;};var BoolBinary=function BoolBinary(left,sign,right){_classCallCheck(this,BoolBinary);this.kind=\"binary\";this.operator=void 0;this.left=void 0;this.right=void 0;this.operator=new BinaryOperator(sign);this.left=left;this.right=right;};// Factory functions\nexport function variable(name){return new BoolVariable(name);}export function top(){return new BoolConstant(true);}export function bottom(){return new BoolConstant(false);}export function not(child){return new BoolUnary('~',child);}export function and(left,right){return new BoolBinary(left,'&',right);}export function or(left,right){return new BoolBinary(left,'|',right);}export function implies(left,right){return new BoolBinary(left,'->',right);}export function iff(left,right){return new BoolBinary(left,'==',right);}","map":{"version":3,"sources":["/Users/johnny/IC/Computing/year2/DRP/drp48/src/server/gameApp/logicResolver/bools.ts"],"names":["UnaryOperator","op","b","unaryOpFuncTable","sign","BinaryOperator","b1","b2","binaryOpFuncTable","BoolConstant","value","kind","BoolVariable","variable","BoolUnary","child","operator","BoolBinary","left","right","name","top","bottom","not","and","or","implies","iff"],"mappings":"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","sourcesContent":["export type BoolTree = BoolConstant | BoolVariable | BoolUnary | BoolBinary\n\nexport class UnaryOperator { \n  static unaryOpFuncTable: { [id: string]: (b: boolean) => boolean} = {\n    '~': b => !b\n  }\n\n  static apply(op: UnaryOperator, b : boolean): boolean {\n    return UnaryOperator.unaryOpFuncTable[op.sign](b)\n  }\n\n  sign: string \n\n  constructor(sign: string) {\n    this.sign = sign\n  }\n}\n\nexport class BinaryOperator { \n  static binaryOpFuncTable: { [id: string]: (b1: boolean, b2: boolean) => boolean} = {\n    '&': (b1, b2) => b1 && b2,\n    '|': (b1, b2) => b1 || b2,\n    '->': (b1, b2) => !b1 || b2,\n    '==': (b1, b2) => b1 == b2,\n  }\n\n  static apply(op: BinaryOperator, b1: boolean, b2: boolean): boolean {\n    return BinaryOperator.binaryOpFuncTable[op.sign](b1, b2)\n  }\n\n  sign: string \n\n  constructor(sign: string) {\n    this.sign = sign\n  }\n}\n\n\nclass BoolConstant {\n  kind: \"constant\" = \"constant\"\n  value: boolean\n  constructor(value: boolean) {\n    this.value = value\n  }\n}\n\nclass BoolVariable {\n  kind: \"variable\" = \"variable\"\n  variable: string\n  constructor(variable: string) {\n    this.variable = variable\n  }\n}\n\nclass BoolUnary {\n  kind: \"unary\" = \"unary\"\n  operator: UnaryOperator\n  child: BoolTree\n  constructor(sign: string, child: BoolTree) {\n    this.operator = new UnaryOperator(sign)\n    this.child = child\n  }\n}\n\nclass BoolBinary {\n  kind: \"binary\" = \"binary\"\n  operator: BinaryOperator\n  left: BoolTree\n  right: BoolTree\n  constructor(left: BoolTree, sign: string, right: BoolTree) {\n    this.operator = new BinaryOperator(sign)\n    this.left = left\n    this.right = right\n  }\n}\n\n// Factory functions\n\nexport function variable(name: string): BoolVariable {\n  return new BoolVariable(name)\n}\n\nexport function top(): BoolConstant {\n  return new BoolConstant(true)\n}\n\nexport function bottom(): BoolConstant {\n  return new BoolConstant(false)\n}\n\nexport function not(child: BoolTree): BoolUnary {\n  return new BoolUnary('~', child)\n}\n\nexport function and(left: BoolTree, right: BoolTree): BoolBinary {\n  return new BoolBinary(left, '&', right)\n}\n\nexport function or(left: BoolTree, right: BoolTree): BoolBinary {\n  return new BoolBinary(left, '|', right)\n}\n\nexport function implies(left: BoolTree, right: BoolTree): BoolBinary {\n  return new BoolBinary(left, '->', right)\n}\n\nexport function iff(left: BoolTree, right: BoolTree): BoolBinary {\n  return new BoolBinary(left, '==', right)\n}\n\n"]},"metadata":{},"sourceType":"module"}