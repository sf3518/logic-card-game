{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/IC/Computing/DRP/drp48/src/components/editor/EditorHand.tsx\";\nimport React, { useContext } from 'react';\nimport { CardComponent } from '../game/Card';\nimport { EditorContext } from './LevelEditor';\nimport { EditorClickSlot } from './ClickSlot';\nimport Tooltip from '@material-ui/core/Tooltip';\nexport const EditorHand = ({\n  onPick,\n  onClickOnTag,\n  onDrop\n}) => {\n  const context = useContext(EditorContext);\n  const cards = context.handCards;\n  const isSelected = context.state.kind == 'select';\n\n  const isPicked = index => context.state.kind == 'select' && context.state.select.kind == 'hand' && context.state.select.hpos == index;\n\n  const renderCard = i => {\n    const tag = cards[i][1] ? cards[i][1] : Number.POSITIVE_INFINITY;\n    return /*#__PURE__*/React.createElement(CardComponent, {\n      isSelected: isPicked(i),\n      scale: 1,\n      tag: tag,\n      cardSymbol: cards[i][0],\n      onClick: () => {\n        onPick(i);\n      },\n      onClickOnTag: () => onClickOnTag(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const renderHandCardArea = () => {\n    let result = [];\n\n    if (isSelected) {\n      result.push( /*#__PURE__*/React.createElement(EditorClickSlot, {\n        scale: 1,\n        isActive: true,\n        onDrop: onDrop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 19\n        }\n      }));\n    }\n\n    for (let i = 0; i < cards.length; i++) {\n      result.push(renderCard(i));\n\n      if (isSelected) {\n        result.push( /*#__PURE__*/React.createElement(EditorClickSlot, {\n          scale: 1,\n          isActive: true,\n          onDrop: onDrop,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }\n        }));\n      }\n    }\n\n    return result;\n  };\n\n  const tooltip = isSelected ? \"\" : \"Click me to select a hand card\";\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    title: tooltip,\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    style: {\n      width: '100%',\n      height: '133px',\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: \"center\",\n      float: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, renderHandCardArea()));\n};","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/components/editor/EditorHand.tsx"],"names":["React","useContext","CardComponent","EditorContext","EditorClickSlot","Tooltip","EditorHand","onPick","onClickOnTag","onDrop","context","cards","handCards","isSelected","state","kind","isPicked","index","select","hpos","renderCard","i","tag","Number","POSITIVE_INFINITY","renderHandCardArea","result","push","length","tooltip","width","height","display","flexWrap","justifyContent","float"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { Card, Premise } from '../../types'\nimport { CardComponent } from '../game/Card'\nimport { EditorContext } from './LevelEditor'\nimport { EditorClickSlot } from './ClickSlot'\nimport Tooltip from '@material-ui/core/Tooltip'\n\ninterface HandCardAreaProps {\n  onPick: (hpos: number) => void\n  onClickOnTag: (hpos: number) => void\n  onDrop: () => void\n}\n\nexport const EditorHand = ({\n  onPick,\n  onClickOnTag,\n  onDrop\n}: HandCardAreaProps): JSX.Element => {\n\n  const context = useContext(EditorContext)\n  const cards = context.handCards\n\n  const isSelected = context.state.kind == 'select'\n\n  const isPicked = (index: number) => \n    context.state.kind == 'select'  \n    && context.state.select.kind == 'hand' \n    && context.state.select.hpos == index\n\n  const renderCard = (i: number): JSX.Element => {\n    const tag = cards[i][1] ? cards[i][1] : Number.POSITIVE_INFINITY\n    return <CardComponent  \n      isSelected={isPicked(i)}\n      scale={1}\n      tag={tag}\n      cardSymbol={cards[i][0]} \n      onClick={() => {\n          onPick(i)\n      }}\n      onClickOnTag={() => onClickOnTag(i)}\n    />\n  }\n\n  const renderHandCardArea = (): JSX.Element[] => {\n    let result: JSX.Element[] = []\n    if (isSelected) {\n      result.push(<EditorClickSlot \n        scale={1}\n        isActive={true}\n        onDrop={onDrop}\n      />)\n    }\n    for (let i = 0; i < cards.length; i++) {\n      result.push(renderCard(i))\n      if (isSelected) {\n        result.push(<EditorClickSlot \n          scale={1}\n          isActive={true}\n          onDrop={onDrop}\n        />)\n      }\n    }\n    return result\n  }\n\n  const tooltip = isSelected ? \"\" : \"Click me to select a hand card\"\n\n  return (\n    <Tooltip title={tooltip} arrow >\n      <div \n        className=\"board-row\" \n        style={{\n          width: '100%',\n          height: '133px',\n          display: 'flex',\n          flexWrap: 'wrap',\n          justifyContent: \"center\",\n          float: \"none\",\n        }}> \n        {renderHandCardArea()}\n      </div>\n    </Tooltip>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}