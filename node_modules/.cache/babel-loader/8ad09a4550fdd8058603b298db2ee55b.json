{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/IC/Computing/DRP/drp48/src/components/game/LevelBoard.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { PremiseComponent } from './Premise';\nimport { HandCardAreaComponent } from './HandCard';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Axios from 'axios';\nimport { Paths } from '../../routesPaths';\nimport { doActionToView, getGoalStates } from '../../game/views';\nimport { Table } from 'react-bootstrap';\nimport Context from './gameContext';\nimport { playCardsToAction, discardAction } from '../../game/actions';\nimport { variable } from '../../server/gameApp/logicResolver/bools';\nimport { GoalsComponent } from './Goals';\nimport { useParams } from 'react-router';\n\nfunction initialGameView(playerVar) {\n  return {\n    playerVar: playerVar,\n    handCardWithCount: [],\n    discardPile: [],\n    premises: [],\n    deckCount: 0,\n    goals: [{\n      kind: 'prove',\n      expr: [playerVar],\n      boolTree: variable(playerVar)\n    }]\n  };\n}\n\nconst playAs = \"A\"; // Game board\n\nconst LevelBoardComponent = () => {\n  // read router parameter\n  const params = useParams();\n  const levelID = Number(params.levelID);\n  console.log(levelID, params.levelID); // Actions been taken in this round\n\n  const [actions, setActions] = useState([]); // Which hand card is selected at now \n  // -1 if no card is selected\n\n  const [handSelected, setHandSelected] = useState(-1); // History of views in this round\n\n  const [historyViews, setHV] = useState([initialGameView(\"A\")]);\n  const view = historyViews[historyViews.length - 1];\n  const [goalStates, setGoalStates] = useState(view.goals.map(_ => false)); // Refresh from server at the very beginning\n\n  useEffect(() => {\n    fetchInitLevelFromServer();\n  }, []);\n\n  const unselectHandCard = () => setHandSelected(-1);\n\n  const setHistoryViews = newViews => {\n    setHV(newViews);\n    setGoalStates(getGoalStates(newViews[newViews.length - 1]));\n  };\n\n  const pushAction = action => {\n    setActions(actions.concat(action));\n  };\n\n  const popAction = () => {\n    setActions(actions.slice(0, actions.length - 1));\n  };\n\n  const pushHistoryView = view => {\n    setHistoryViews(historyViews.concat(view));\n  };\n\n  const popHistoryView = () => {\n    setHistoryViews(historyViews.slice(0, historyViews.length - 1));\n  };\n\n  const doAction = action => {\n    const newView = doActionToView(view, action);\n    pushAction(action);\n    pushHistoryView(newView);\n    unselectHandCard();\n  };\n\n  const undoAction = () => {\n    if (actions.length > 0) {\n      popAction();\n      popHistoryView();\n    }\n  };\n\n  const clearHistory = () => {\n    while (actions.length > 0) {\n      undoAction();\n    }\n  };\n\n  const fetchInitLevelFromServer = () => {\n    const config = {\n      params: {\n        levelID: levelID\n      }\n    };\n    Axios.get(Paths.levelRequest, config).then(res => {\n      console.log(res.data);\n      setHistoryViews([res.data.view]);\n    });\n  };\n\n  const submitAnswerToServer = () => {\n    const config = {\n      params: {\n        isSuccess: goalStates.reduce((a, b) => a && b)\n      }\n    };\n    Axios.get(Paths.levelSubmit, config).then(res => {\n      alert(res.data.msg);\n    });\n  };\n\n  const renderPremises = () => {\n    const result = [];\n\n    for (let i = 0; i < view.premises.length; i++) {\n      const [premise, isLocked] = view.premises[i];\n      result.push( /*#__PURE__*/React.createElement(PremiseComponent, {\n        cards: premise,\n        isLocked: isLocked,\n        premiseIndex: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }\n    }, result.map(it => /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 27\n      }\n    }, it)));\n  };\n\n  const renderHandCardArea = () => {\n    return /*#__PURE__*/React.createElement(HandCardAreaComponent, {\n      playerVar: playAs,\n      cards: view.handCardWithCount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const renderGoals = () => {\n    return /*#__PURE__*/React.createElement(GoalsComponent, {\n      goals: view.goals,\n      isSuccessful: goalStates,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 12\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(DndProvider, {\n    backend: HTML5Backend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      playerVar: playAs,\n      handSelected: handSelected,\n      handCardSelected: handSelected >= 0 ? view.handCardWithCount[handSelected][0] : undefined,\n      unselectHand: unselectHandCard,\n      pickHandCardCallback: handIndex => {\n        setHandSelected(handIndex);\n      },\n      moveHandCardToPremise: (premiseId, inPremiseIndex) => {\n        doAction(playCardsToAction(playAs, handSelected, [premiseId, inPremiseIndex]));\n      },\n      discardPickedHandCard: () => {\n        doAction(discardAction(playAs, handSelected));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }), renderPremises(), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, renderHandCardArea()), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => alert(JSON.stringify(view)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \"view\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchInitLevelFromServer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \"refresh\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: submitAnswerToServer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, \"submit\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: undoAction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, \"Undo\"), renderGoals()));\n};\n\nexport { LevelBoardComponent };","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/components/game/LevelBoard.tsx"],"names":["React","useState","useEffect","PremiseComponent","HandCardAreaComponent","DndProvider","HTML5Backend","Axios","Paths","doActionToView","getGoalStates","Table","Context","playCardsToAction","discardAction","variable","GoalsComponent","useParams","initialGameView","playerVar","handCardWithCount","discardPile","premises","deckCount","goals","kind","expr","boolTree","playAs","LevelBoardComponent","params","levelID","Number","console","log","actions","setActions","handSelected","setHandSelected","historyViews","setHV","view","length","goalStates","setGoalStates","map","_","fetchInitLevelFromServer","unselectHandCard","setHistoryViews","newViews","pushAction","action","concat","popAction","slice","pushHistoryView","popHistoryView","doAction","newView","undoAction","clearHistory","config","get","levelRequest","then","res","data","submitAnswerToServer","isSuccess","reduce","a","b","levelSubmit","alert","msg","renderPremises","result","i","premise","isLocked","push","it","renderHandCardArea","renderGoals","handCardSelected","undefined","unselectHand","pickHandCardCallback","handIndex","moveHandCardToPremise","premiseId","inPremiseIndex","discardPickedHandCard","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { PremiseComponent } from './Premise'\nimport { HandCardAreaComponent } from './HandCard'\nimport { Premise, GameView, GameAction, Card } from '../../types'\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { DiscardArea } from './DiscardArea'\nimport Axios, { AxiosRequestConfig } from 'axios'\nimport SocketIOClient from 'socket.io-client'\nimport { Paths, SocketEvents } from '../../routesPaths'\nimport { doActionToView, playHandCardTo, getGoalStates } from '../../game/views'\nimport { Table } from 'react-bootstrap'\nimport Context from './gameContext'\nimport { playCardsToAction, discardAction } from '../../game/actions'\nimport { variable } from '../../server/gameApp/logicResolver/bools'\nimport { GoalsComponent } from './Goals'\nimport { useParams } from 'react-router'\n\ninterface LevelBoardParams {\n  levelID: string\n}\n\nfunction initialGameView(playerVar: string): GameView {\n  return { \n    playerVar: playerVar,\n    handCardWithCount: [],\n    discardPile: [],\n    premises: [],\n    deckCount: 0,\n    goals: [{ kind: 'prove', expr: [playerVar as Card], boolTree: variable(playerVar) }]\n  }\n}\n\nconst playAs: Card = \"A\"\n\n// Game board\nconst LevelBoardComponent = () => {\n  // read router parameter\n  const params = useParams<LevelBoardParams>()\n  const levelID = Number(params.levelID)\n\n  console.log(levelID, params.levelID);\n  \n\n  // Actions been taken in this round\n  const [actions, setActions] = useState([] as GameAction[])\n  // Which hand card is selected at now \n  // -1 if no card is selected\n  const [handSelected, setHandSelected] = useState(-1)\n  // History of views in this round\n  const [historyViews, setHV] = useState([initialGameView(\"A\")] as GameView[])\n\n  const view = historyViews[historyViews.length - 1]\n\n  const [goalStates, setGoalStates] = useState(view.goals.map(_ => false))\n\n  // Refresh from server at the very beginning\n  useEffect(() => {\n    fetchInitLevelFromServer()\n  }, [])\n\n  const unselectHandCard = () => setHandSelected(-1)\n\n  const setHistoryViews = (newViews: GameView[]) => {\n    setHV(newViews)\n    setGoalStates(getGoalStates(newViews[newViews.length - 1]))\n  }\n\n  const pushAction = (action: GameAction) => {\n    setActions(actions.concat(action))\n  }\n\n  const popAction = () => {\n    setActions(actions.slice(0, actions.length - 1))\n  }\n\n  const pushHistoryView = (view: GameView) => {\n    setHistoryViews(historyViews.concat(view))\n  }\n\n  const popHistoryView = () => {\n    setHistoryViews(historyViews.slice(0, historyViews.length - 1))\n  }\n\n  const doAction = (action: GameAction) => {\n    const newView = doActionToView(view, action)\n    pushAction(action)\n    pushHistoryView(newView)\n    unselectHandCard()\n  }\n\n  const undoAction = () => {\n    if (actions.length > 0) {\n      popAction()\n      popHistoryView()\n    }\n  }\n\n  const clearHistory = () => {\n    while (actions.length > 0) {\n      undoAction()\n    }\n  }\n\n  const fetchInitLevelFromServer = () => {\n    const config: AxiosRequestConfig = {\n      params: {\n        levelID: levelID,\n      }\n    }\n    Axios.get(Paths.levelRequest, config)\n      .then(res => {\n        console.log(res.data);\n        setHistoryViews([res.data.view])\n      })\n  }\n\n  const submitAnswerToServer = () => {\n    const config: AxiosRequestConfig = {\n      params: {\n        isSuccess: goalStates.reduce((a, b) => a && b)\n      }\n    }\n    Axios.get(Paths.levelSubmit, config)\n      .then(res => {\n        alert(res.data.msg);\n      })\n  }\n\n  const renderPremises = (): JSX.Element => {\n    const result: JSX.Element[] = []\n    for (let i = 0; i < view.premises.length; i++) {\n      const [premise, isLocked] = view.premises[i]\n      result.push(\n        <PremiseComponent \n          cards={premise} \n          isLocked={isLocked}\n          premiseIndex={i} \n        />\n      )\n    }\n    return (\n      <Table striped bordered hover>\n        {result.map(it => <tr>{it}</tr>)}\n      </Table>\n    )\n  }\n\n  const renderHandCardArea = (): JSX.Element => {\n    return <HandCardAreaComponent\n      playerVar={playAs}\n      cards={view.handCardWithCount}\n    />\n  }\n\n  const renderGoals = (): JSX.Element => {\n    return <GoalsComponent goals={view.goals} isSuccessful={goalStates} ></GoalsComponent>\n  }\n\n  return(\n    <DndProvider backend={HTML5Backend}>\n      <Context.Provider value={{\n          playerVar: playAs,\n          handSelected: handSelected,\n          handCardSelected: handSelected >= 0 ? view.handCardWithCount[handSelected][0] : undefined,\n          unselectHand: unselectHandCard,\n          pickHandCardCallback: (handIndex: number) => {\n            setHandSelected(handIndex)\n          },\n          moveHandCardToPremise: (premiseId: number, inPremiseIndex: number) => {\n            doAction(playCardsToAction(playAs, handSelected, [premiseId, inPremiseIndex]))\n          },\n          discardPickedHandCard: () => {\n            doAction(discardAction(playAs, handSelected))\n          }\n      }}>\n        <div className=\"status\"></div>\n          {renderPremises()}\n        <div>\n          {renderHandCardArea()}\n        </div>\n        {/* <button onClick={() => postActionsToServer()}>post</button> */}\n        <button onClick={() => alert(JSON.stringify(view))}>view</button>\n        <button onClick={fetchInitLevelFromServer}>refresh</button>\n        <button onClick={submitAnswerToServer}>submit</button>\n        <button onClick={undoAction}>Undo</button>\n        {renderGoals()}\n      </Context.Provider>\n    </DndProvider>\n  )\n\n}\n\nexport { LevelBoardComponent }"]},"metadata":{},"sourceType":"module"}