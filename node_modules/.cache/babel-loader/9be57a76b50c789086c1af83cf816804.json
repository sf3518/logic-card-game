{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/IC/Computing/DRP/drp48/src/components/entry/levelPage.tsx\";\nimport React from 'react';\nimport '../entry/Entry.css';\nimport { LevelButton } from './levelButton';\nimport { useParams } from 'react-router';\nconst numberOfRows = 4;\nexport const LevelPage = () => {\n  const {\n    sectionName,\n    slid,\n    elid\n  } = useParams();\n  const startLevelID = Number(slid);\n  const endLevelID = Number(elid);\n\n  const renderTable = () => {\n    const renderRow = (startID, count) => {\n      const row = [];\n\n      for (let i = startID; i < count + startID; i++) {\n        row.push( /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 18\n          }\n        }, /*#__PURE__*/React.createElement(LevelButton, {\n          levelID: i,\n          isAvailable: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 22\n          }\n        })));\n      }\n\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 14\n        }\n      }, row);\n    };\n\n    const totalCount = endLevelID - startLevelID + 1;\n    const rowCount = Math.floor(totalCount / numberOfRows) + (totalCount % numberOfRows == 0 ? 0 : 1);\n    const table = [];\n\n    for (let i = 0, start = startLevelID; i < numberOfRows; i++, start += rowCount) {\n      table.push(renderRow(start, rowCount));\n    }\n\n    return /*#__PURE__*/React.createElement(\"table\", {\n      style: {\n        margin: \"auto\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    }, table);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, sectionName), renderTable());\n};","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/components/entry/levelPage.tsx"],"names":["React","LevelButton","useParams","numberOfRows","LevelPage","sectionName","slid","elid","startLevelID","Number","endLevelID","renderTable","renderRow","startID","count","row","i","push","totalCount","rowCount","Math","floor","table","start","margin","textAlign"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,cAA1B;AAQA,MAAMC,YAAY,GAAG,CAArB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAmB;AAE1C,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA;AAArB,MAA8BL,SAAS,EAA7C;AACA,QAAMM,YAAY,GAAGC,MAAM,CAACH,IAAD,CAA3B;AACA,QAAMI,UAAU,GAAGD,MAAM,CAACF,IAAD,CAAzB;;AAEA,QAAMI,WAAW,GAAG,MAAmB;AAErC,UAAMC,SAAS,GAAG,CAACC,OAAD,EAAkBC,KAAlB,KAAoC;AACpD,YAAMC,GAAkB,GAAG,EAA3B;;AACA,WAAI,IAAIC,CAAC,GAAGH,OAAZ,EAAqBG,CAAC,GAAGF,KAAK,GAAGD,OAAjC,EAA0CG,CAAC,EAA3C,EAA+C;AAC7CD,QAAAA,GAAG,CAACE,IAAJ,eAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAI,oBAAC,WAAD;AAAa,UAAA,OAAO,EAAED,CAAtB;AAAyB,UAAA,WAAW,EAAE,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAJ,CAAT;AACD;;AACD,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,GAAL,CAAP;AACD,KAND;;AAQA,UAAMG,UAAU,GAAGR,UAAU,GAAGF,YAAb,GAA4B,CAA/C;AACA,UAAMW,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAU,GAAGf,YAAxB,KAAyCe,UAAU,GAAGf,YAAb,IAA6B,CAA7B,GAAiC,CAAjC,GAAqC,CAA9E,CAAjB;AACA,UAAMmB,KAAoB,GAAG,EAA7B;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAR,EAAWO,KAAK,GAAGf,YAAxB,EAAsCQ,CAAC,GAAGb,YAA1C,EAAwDa,CAAC,IAAIO,KAAK,IAAIJ,QAAtE,EAAgF;AAC9EG,MAAAA,KAAK,CAACL,IAAN,CAAWL,SAAS,CAACW,KAAD,EAAQJ,QAAR,CAApB;AACD;;AACD,wBAAO;AAAO,MAAA,KAAK,EAAE;AAAEK,QAAAA,MAAM,EAAE;AAAV,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCF,KAAnC,CAAP;AACD,GAjBD;;AAmBA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEG,MAAAA,SAAS,EAAC;AAAZ,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKpB,WAAL,CADF,EAEGM,WAAW,EAFd,CADF;AAMD,CA/BM","sourcesContent":["import React from 'react'\nimport '../entry/Entry.css';\nimport { LevelButton } from './levelButton'\nimport { useParams } from 'react-router';\n\ninterface LevelPageParams {\n  sectionName: string\n  slid: string\n  elid: string\n}\n\nconst numberOfRows = 4\n\nexport const LevelPage = (): JSX.Element => {\n  \n  const { sectionName, slid, elid } = useParams<LevelPageParams>()\n  const startLevelID = Number(slid)\n  const endLevelID = Number(elid)\n\n  const renderTable = (): JSX.Element => {\n    \n    const renderRow = (startID: number, count: number) => {\n      const row: JSX.Element[] = []\n      for(let i = startID; i < count + startID; i++) {\n        row.push(<td><LevelButton levelID={i} isAvailable={true} /></td>)\n      }\n      return <tr>{row}</tr>\n    }\n    \n    const totalCount = endLevelID - startLevelID + 1\n    const rowCount = Math.floor(totalCount / numberOfRows) + (totalCount % numberOfRows == 0 ? 0 : 1)\n    const table: JSX.Element[] = []\n    for (let i = 0, start = startLevelID; i < numberOfRows; i++, start += rowCount) {\n      table.push(renderRow(start, rowCount))\n    }\n    return <table style={{ margin: \"auto\" }}>{table}</table>\n  } \n\n  return (\n    <div style={{ textAlign:'center' }}>\n      <h1>{sectionName}</h1>\n      {renderTable()}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}