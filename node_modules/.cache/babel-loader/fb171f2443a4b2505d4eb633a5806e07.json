{"ast":null,"code":"export class UnaryOperator {\n  static apply(op, b) {\n    return UnaryOperator.unaryOpFuncTable[op.sign](b);\n  }\n\n  constructor(sign) {\n    this.sign = void 0;\n    this.sign = sign;\n  }\n\n}\nUnaryOperator.unaryOpFuncTable = {\n  '~': b => !b\n};\nexport class BinaryOperator {\n  static apply(op, b1, b2) {\n    return BinaryOperator.binaryOpFuncTable[op.sign](b1, b2);\n  }\n\n  constructor(sign) {\n    this.sign = void 0;\n    this.sign = sign;\n  }\n\n}\nBinaryOperator.binaryOpFuncTable = {\n  '&': (b1, b2) => b1 && b2,\n  '|': (b1, b2) => b1 || b2,\n  '->': (b1, b2) => !b1 || b2,\n  '==': (b1, b2) => b1 == b2\n};\n\nclass BoolConstant {\n  constructor(value) {\n    this.kind = \"constant\";\n    this.value = void 0;\n    this.value = value;\n  }\n\n}\n\nclass BoolVariable {\n  constructor(variable) {\n    this.kind = \"variable\";\n    this.variable = void 0;\n    this.variable = variable;\n  }\n\n}\n\nclass BoolUnary {\n  constructor(sign, child) {\n    this.kind = \"unary\";\n    this.operator = void 0;\n    this.child = void 0;\n    this.operator = new UnaryOperator(sign);\n    this.child = child;\n  }\n\n}\n\nclass BoolBinary {\n  constructor(left, sign, right) {\n    this.kind = \"binary\";\n    this.operator = void 0;\n    this.left = void 0;\n    this.right = void 0;\n    this.operator = new BinaryOperator(sign);\n    this.left = left;\n    this.right = right;\n  }\n\n} // Factory functions\n\n\nexport function variable(name) {\n  return new BoolVariable(name);\n}\nexport function top() {\n  return new BoolConstant(true);\n}\nexport function bottom() {\n  return new BoolConstant(false);\n}\nexport function not(child) {\n  return new BoolUnary('~', child);\n}\nexport function and(left, right) {\n  return new BoolBinary(left, '&', right);\n}\nexport function or(left, right) {\n  return new BoolBinary(left, '|', right);\n}\nexport function implies(left, right) {\n  return new BoolBinary(left, '->', right);\n}\nexport function iff(left, right) {\n  return new BoolBinary(left, '==', right);\n}","map":{"version":3,"sources":["/Users/johnny/IC/Computing/DRP/drp48/src/server/gameApp/logicResolver/bools.ts"],"names":["UnaryOperator","apply","op","b","unaryOpFuncTable","sign","constructor","BinaryOperator","b1","b2","binaryOpFuncTable","BoolConstant","value","kind","BoolVariable","variable","BoolUnary","child","operator","BoolBinary","left","right","name","top","bottom","not","and","or","implies","iff"],"mappings":"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","sourcesContent":["export type BoolTree = BoolConstant | BoolVariable | BoolUnary | BoolBinary\n\nexport class UnaryOperator { \n  static unaryOpFuncTable: { [id: string]: (b: boolean) => boolean} = {\n    '~': b => !b\n  }\n\n  static apply(op: UnaryOperator, b : boolean): boolean {\n    return UnaryOperator.unaryOpFuncTable[op.sign](b)\n  }\n\n  sign: string \n\n  constructor(sign: string) {\n    this.sign = sign\n  }\n}\n\nexport class BinaryOperator { \n  static binaryOpFuncTable: { [id: string]: (b1: boolean, b2: boolean) => boolean} = {\n    '&': (b1, b2) => b1 && b2,\n    '|': (b1, b2) => b1 || b2,\n    '->': (b1, b2) => !b1 || b2,\n    '==': (b1, b2) => b1 == b2,\n  }\n\n  static apply(op: BinaryOperator, b1: boolean, b2: boolean): boolean {\n    return BinaryOperator.binaryOpFuncTable[op.sign](b1, b2)\n  }\n\n  sign: string \n\n  constructor(sign: string) {\n    this.sign = sign\n  }\n}\n\n\nclass BoolConstant {\n  kind: \"constant\" = \"constant\"\n  value: boolean\n  constructor(value: boolean) {\n    this.value = value\n  }\n}\n\nclass BoolVariable {\n  kind: \"variable\" = \"variable\"\n  variable: string\n  constructor(variable: string) {\n    this.variable = variable\n  }\n}\n\nclass BoolUnary {\n  kind: \"unary\" = \"unary\"\n  operator: UnaryOperator\n  child: BoolTree\n  constructor(sign: string, child: BoolTree) {\n    this.operator = new UnaryOperator(sign)\n    this.child = child\n  }\n}\n\nclass BoolBinary {\n  kind: \"binary\" = \"binary\"\n  operator: BinaryOperator\n  left: BoolTree\n  right: BoolTree\n  constructor(left: BoolTree, sign: string, right: BoolTree) {\n    this.operator = new BinaryOperator(sign)\n    this.left = left\n    this.right = right\n  }\n}\n\n// Factory functions\n\nexport function variable(name: string): BoolVariable {\n  return new BoolVariable(name)\n}\n\nexport function top(): BoolConstant {\n  return new BoolConstant(true)\n}\n\nexport function bottom(): BoolConstant {\n  return new BoolConstant(false)\n}\n\nexport function not(child: BoolTree): BoolUnary {\n  return new BoolUnary('~', child)\n}\n\nexport function and(left: BoolTree, right: BoolTree): BoolBinary {\n  return new BoolBinary(left, '&', right)\n}\n\nexport function or(left: BoolTree, right: BoolTree): BoolBinary {\n  return new BoolBinary(left, '|', right)\n}\n\nexport function implies(left: BoolTree, right: BoolTree): BoolBinary {\n  return new BoolBinary(left, '->', right)\n}\n\nexport function iff(left: BoolTree, right: BoolTree): BoolBinary {\n  return new BoolBinary(left, '==', right)\n}\n\n"]},"metadata":{},"sourceType":"module"}